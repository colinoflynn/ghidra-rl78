define endian=little;

define space memory type=ram_space size=4 wordsize=1 default;

# thx to https://github.com/NationalSecurityAgency/ghidra/issues/773 for the idea
define pcodeop segment;

# TODO: change PSW handling to pack/unpack on PUSH/POP/other ops and store flags as 1 byte each

define space register type=register_space size=4;

define register offset=0x110000 size=8 contextreg;

define context contextreg
	cond_skc  = (0, 1) noflow
	cond_sknc = (1, 2) noflow
	cond_skz  = (2, 3) noflow
	cond_sknz = (3, 4) noflow
	cond_skh  = (4, 5) noflow
	cond_sknh = (5, 6) noflow
;

define register offset=0xFFEF8 size=1 [
	X A C B E D L H
];

define register offset=0xFFEF8 size=2 [
	AX BC DE HL
];

# TODO: what offset/size should this be?
define register offset=0x100000 size=3 [
	PC
];

define register offset=0xFFFF8 size=2 [
	SP
];

define register offset=0xFFFF8 size=1 [
	SPL SPH PSW RESERVED CS ES PMC MEM
];

@define CY   "PSW[0,1]"
@define ISP0 "PSW[1,1]"
@define ISP1 "PSW[2,1]"
@define RBS0 "PSW[3,1]"
@define AC   "PSW[4,1]"
@define RBS1 "PSW[5,1]"
@define Z    "PSW[6,1]"
@define IE   "PSW[7,1]"

define token opcode1(8)
	op = (0, 7)
	jdisp8 = (0, 7) signed
	byte = (0, 7)
	byte1 = (0, 7)
	byte2 = (0, 7)
	addr_abs8 = (0, 7)
;

define token opcode2(16)
	jdisp16 = (0, 15) signed
	word = (0, 15)
	addr_abs16 = (0, 15)
;

define token opcode3(24)
	addr_abs20 = (0, 23)
;

define pcodeop sel;
define pcodeop halt;
define pcodeop stop;

#
# Conditional single-instruction skip
#

:^instruction is cond_skc=1 & instruction [ cond_skc = 0; ] {
	if ($(CY) == 1) goto <skip>;
	build instruction;
	<skip>
}

:^instruction is cond_sknc=1 & instruction [ cond_sknc = 0; ] {
	if ($(CY) == 0) goto <skip>;
	build instruction;
	<skip>
}

:^instruction is cond_skz=1 & instruction [ cond_skz = 0; ] {
	if ($(Z) == 1) goto <skip>;
	build instruction;
	<skip>
}

:^instruction is cond_sknz=1 & instruction [ cond_sknz = 0; ] {
	if ($(Z) == 0) goto <skip>;
	build instruction;
	<skip>
}

:^instruction is cond_skh=1 & instruction [ cond_skh = 0; ] {
	if (($(Z) | $(CY)) == 0) goto <skip>;
	build instruction;
	<skip>
}

:^instruction is cond_sknh=1 & instruction [ cond_sknh = 0; ] {
	if (($(Z) | $(CY)) == 1) goto <skip>;
	build instruction;
	<skip>
}

#
# Branch targets
#

tgt_rel8: target is jdisp8 [ target = inst_next + jdisp8; ] { export *:4 target; }

tgt_rel16: target is jdisp16 [ target = inst_next + jdisp16; ] { export *:4 target; }

tgt_addr16b: target is addr_abs16 [ target = 0xF0000 + addr_abs16; ] { export *:1 target; }
tgt_addr16w: target is addr_abs16 [ target = 0xF0000 + addr_abs16; ] { export *:2 target; }
tgt_addr16d: target is addr_abs16 [ target = 0xF0000 + addr_abs16; ] { export *:4 target; }

tgt_addr16_0: target is addr_abs16 [ target = 0 + addr_abs16; ] { export *:4 target; }

tgt_esaddr16b: ES:!addr_abs16 is ES & addr_abs16 { local tmp:4 = segment(ES, addr_abs16:2); export *:1 tmp; }
tgt_esaddr16w: ES:!addr_abs16 is ES & addr_abs16 { local tmp:4 = segment(ES, addr_abs16:2); export *:2 tmp; }

tgt_addr20: target is addr_abs20 [ target = 0 + addr_abs20; ] { export *:4 target; }

tgt_saddrb: target is addr_abs8=0 [ target = 1048320; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=0 [ target = 1048320; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=1 [ target = 1048321; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=1 [ target = 1048321; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=2 [ target = 1048322; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=2 [ target = 1048322; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=3 [ target = 1048323; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=3 [ target = 1048323; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=4 [ target = 1048324; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=4 [ target = 1048324; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=5 [ target = 1048325; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=5 [ target = 1048325; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=6 [ target = 1048326; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=6 [ target = 1048326; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=7 [ target = 1048327; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=7 [ target = 1048327; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=8 [ target = 1048328; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=8 [ target = 1048328; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=9 [ target = 1048329; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=9 [ target = 1048329; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=10 [ target = 1048330; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=10 [ target = 1048330; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=11 [ target = 1048331; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=11 [ target = 1048331; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=12 [ target = 1048332; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=12 [ target = 1048332; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=13 [ target = 1048333; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=13 [ target = 1048333; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=14 [ target = 1048334; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=14 [ target = 1048334; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=15 [ target = 1048335; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=15 [ target = 1048335; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=16 [ target = 1048336; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=16 [ target = 1048336; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=17 [ target = 1048337; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=17 [ target = 1048337; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=18 [ target = 1048338; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=18 [ target = 1048338; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=19 [ target = 1048339; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=19 [ target = 1048339; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=20 [ target = 1048340; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=20 [ target = 1048340; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=21 [ target = 1048341; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=21 [ target = 1048341; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=22 [ target = 1048342; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=22 [ target = 1048342; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=23 [ target = 1048343; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=23 [ target = 1048343; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=24 [ target = 1048344; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=24 [ target = 1048344; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=25 [ target = 1048345; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=25 [ target = 1048345; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=26 [ target = 1048346; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=26 [ target = 1048346; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=27 [ target = 1048347; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=27 [ target = 1048347; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=28 [ target = 1048348; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=28 [ target = 1048348; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=29 [ target = 1048349; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=29 [ target = 1048349; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=30 [ target = 1048350; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=30 [ target = 1048350; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=31 [ target = 1048351; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=31 [ target = 1048351; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=32 [ target = 1048096; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=32 [ target = 1048096; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=33 [ target = 1048097; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=33 [ target = 1048097; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=34 [ target = 1048098; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=34 [ target = 1048098; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=35 [ target = 1048099; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=35 [ target = 1048099; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=36 [ target = 1048100; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=36 [ target = 1048100; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=37 [ target = 1048101; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=37 [ target = 1048101; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=38 [ target = 1048102; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=38 [ target = 1048102; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=39 [ target = 1048103; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=39 [ target = 1048103; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=40 [ target = 1048104; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=40 [ target = 1048104; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=41 [ target = 1048105; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=41 [ target = 1048105; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=42 [ target = 1048106; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=42 [ target = 1048106; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=43 [ target = 1048107; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=43 [ target = 1048107; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=44 [ target = 1048108; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=44 [ target = 1048108; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=45 [ target = 1048109; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=45 [ target = 1048109; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=46 [ target = 1048110; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=46 [ target = 1048110; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=47 [ target = 1048111; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=47 [ target = 1048111; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=48 [ target = 1048112; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=48 [ target = 1048112; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=49 [ target = 1048113; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=49 [ target = 1048113; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=50 [ target = 1048114; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=50 [ target = 1048114; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=51 [ target = 1048115; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=51 [ target = 1048115; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=52 [ target = 1048116; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=52 [ target = 1048116; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=53 [ target = 1048117; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=53 [ target = 1048117; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=54 [ target = 1048118; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=54 [ target = 1048118; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=55 [ target = 1048119; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=55 [ target = 1048119; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=56 [ target = 1048120; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=56 [ target = 1048120; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=57 [ target = 1048121; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=57 [ target = 1048121; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=58 [ target = 1048122; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=58 [ target = 1048122; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=59 [ target = 1048123; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=59 [ target = 1048123; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=60 [ target = 1048124; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=60 [ target = 1048124; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=61 [ target = 1048125; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=61 [ target = 1048125; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=62 [ target = 1048126; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=62 [ target = 1048126; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=63 [ target = 1048127; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=63 [ target = 1048127; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=64 [ target = 1048128; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=64 [ target = 1048128; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=65 [ target = 1048129; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=65 [ target = 1048129; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=66 [ target = 1048130; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=66 [ target = 1048130; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=67 [ target = 1048131; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=67 [ target = 1048131; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=68 [ target = 1048132; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=68 [ target = 1048132; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=69 [ target = 1048133; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=69 [ target = 1048133; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=70 [ target = 1048134; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=70 [ target = 1048134; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=71 [ target = 1048135; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=71 [ target = 1048135; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=72 [ target = 1048136; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=72 [ target = 1048136; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=73 [ target = 1048137; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=73 [ target = 1048137; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=74 [ target = 1048138; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=74 [ target = 1048138; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=75 [ target = 1048139; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=75 [ target = 1048139; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=76 [ target = 1048140; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=76 [ target = 1048140; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=77 [ target = 1048141; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=77 [ target = 1048141; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=78 [ target = 1048142; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=78 [ target = 1048142; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=79 [ target = 1048143; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=79 [ target = 1048143; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=80 [ target = 1048144; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=80 [ target = 1048144; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=81 [ target = 1048145; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=81 [ target = 1048145; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=82 [ target = 1048146; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=82 [ target = 1048146; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=83 [ target = 1048147; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=83 [ target = 1048147; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=84 [ target = 1048148; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=84 [ target = 1048148; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=85 [ target = 1048149; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=85 [ target = 1048149; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=86 [ target = 1048150; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=86 [ target = 1048150; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=87 [ target = 1048151; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=87 [ target = 1048151; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=88 [ target = 1048152; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=88 [ target = 1048152; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=89 [ target = 1048153; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=89 [ target = 1048153; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=90 [ target = 1048154; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=90 [ target = 1048154; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=91 [ target = 1048155; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=91 [ target = 1048155; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=92 [ target = 1048156; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=92 [ target = 1048156; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=93 [ target = 1048157; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=93 [ target = 1048157; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=94 [ target = 1048158; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=94 [ target = 1048158; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=95 [ target = 1048159; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=95 [ target = 1048159; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=96 [ target = 1048160; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=96 [ target = 1048160; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=97 [ target = 1048161; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=97 [ target = 1048161; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=98 [ target = 1048162; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=98 [ target = 1048162; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=99 [ target = 1048163; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=99 [ target = 1048163; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=100 [ target = 1048164; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=100 [ target = 1048164; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=101 [ target = 1048165; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=101 [ target = 1048165; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=102 [ target = 1048166; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=102 [ target = 1048166; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=103 [ target = 1048167; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=103 [ target = 1048167; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=104 [ target = 1048168; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=104 [ target = 1048168; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=105 [ target = 1048169; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=105 [ target = 1048169; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=106 [ target = 1048170; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=106 [ target = 1048170; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=107 [ target = 1048171; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=107 [ target = 1048171; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=108 [ target = 1048172; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=108 [ target = 1048172; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=109 [ target = 1048173; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=109 [ target = 1048173; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=110 [ target = 1048174; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=110 [ target = 1048174; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=111 [ target = 1048175; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=111 [ target = 1048175; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=112 [ target = 1048176; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=112 [ target = 1048176; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=113 [ target = 1048177; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=113 [ target = 1048177; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=114 [ target = 1048178; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=114 [ target = 1048178; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=115 [ target = 1048179; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=115 [ target = 1048179; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=116 [ target = 1048180; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=116 [ target = 1048180; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=117 [ target = 1048181; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=117 [ target = 1048181; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=118 [ target = 1048182; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=118 [ target = 1048182; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=119 [ target = 1048183; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=119 [ target = 1048183; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=120 [ target = 1048184; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=120 [ target = 1048184; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=121 [ target = 1048185; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=121 [ target = 1048185; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=122 [ target = 1048186; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=122 [ target = 1048186; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=123 [ target = 1048187; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=123 [ target = 1048187; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=124 [ target = 1048188; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=124 [ target = 1048188; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=125 [ target = 1048189; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=125 [ target = 1048189; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=126 [ target = 1048190; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=126 [ target = 1048190; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=127 [ target = 1048191; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=127 [ target = 1048191; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=128 [ target = 1048192; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=128 [ target = 1048192; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=129 [ target = 1048193; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=129 [ target = 1048193; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=130 [ target = 1048194; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=130 [ target = 1048194; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=131 [ target = 1048195; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=131 [ target = 1048195; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=132 [ target = 1048196; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=132 [ target = 1048196; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=133 [ target = 1048197; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=133 [ target = 1048197; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=134 [ target = 1048198; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=134 [ target = 1048198; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=135 [ target = 1048199; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=135 [ target = 1048199; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=136 [ target = 1048200; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=136 [ target = 1048200; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=137 [ target = 1048201; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=137 [ target = 1048201; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=138 [ target = 1048202; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=138 [ target = 1048202; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=139 [ target = 1048203; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=139 [ target = 1048203; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=140 [ target = 1048204; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=140 [ target = 1048204; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=141 [ target = 1048205; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=141 [ target = 1048205; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=142 [ target = 1048206; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=142 [ target = 1048206; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=143 [ target = 1048207; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=143 [ target = 1048207; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=144 [ target = 1048208; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=144 [ target = 1048208; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=145 [ target = 1048209; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=145 [ target = 1048209; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=146 [ target = 1048210; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=146 [ target = 1048210; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=147 [ target = 1048211; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=147 [ target = 1048211; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=148 [ target = 1048212; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=148 [ target = 1048212; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=149 [ target = 1048213; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=149 [ target = 1048213; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=150 [ target = 1048214; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=150 [ target = 1048214; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=151 [ target = 1048215; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=151 [ target = 1048215; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=152 [ target = 1048216; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=152 [ target = 1048216; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=153 [ target = 1048217; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=153 [ target = 1048217; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=154 [ target = 1048218; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=154 [ target = 1048218; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=155 [ target = 1048219; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=155 [ target = 1048219; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=156 [ target = 1048220; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=156 [ target = 1048220; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=157 [ target = 1048221; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=157 [ target = 1048221; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=158 [ target = 1048222; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=158 [ target = 1048222; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=159 [ target = 1048223; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=159 [ target = 1048223; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=160 [ target = 1048224; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=160 [ target = 1048224; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=161 [ target = 1048225; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=161 [ target = 1048225; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=162 [ target = 1048226; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=162 [ target = 1048226; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=163 [ target = 1048227; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=163 [ target = 1048227; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=164 [ target = 1048228; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=164 [ target = 1048228; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=165 [ target = 1048229; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=165 [ target = 1048229; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=166 [ target = 1048230; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=166 [ target = 1048230; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=167 [ target = 1048231; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=167 [ target = 1048231; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=168 [ target = 1048232; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=168 [ target = 1048232; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=169 [ target = 1048233; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=169 [ target = 1048233; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=170 [ target = 1048234; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=170 [ target = 1048234; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=171 [ target = 1048235; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=171 [ target = 1048235; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=172 [ target = 1048236; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=172 [ target = 1048236; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=173 [ target = 1048237; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=173 [ target = 1048237; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=174 [ target = 1048238; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=174 [ target = 1048238; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=175 [ target = 1048239; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=175 [ target = 1048239; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=176 [ target = 1048240; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=176 [ target = 1048240; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=177 [ target = 1048241; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=177 [ target = 1048241; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=178 [ target = 1048242; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=178 [ target = 1048242; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=179 [ target = 1048243; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=179 [ target = 1048243; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=180 [ target = 1048244; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=180 [ target = 1048244; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=181 [ target = 1048245; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=181 [ target = 1048245; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=182 [ target = 1048246; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=182 [ target = 1048246; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=183 [ target = 1048247; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=183 [ target = 1048247; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=184 [ target = 1048248; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=184 [ target = 1048248; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=185 [ target = 1048249; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=185 [ target = 1048249; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=186 [ target = 1048250; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=186 [ target = 1048250; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=187 [ target = 1048251; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=187 [ target = 1048251; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=188 [ target = 1048252; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=188 [ target = 1048252; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=189 [ target = 1048253; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=189 [ target = 1048253; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=190 [ target = 1048254; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=190 [ target = 1048254; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=191 [ target = 1048255; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=191 [ target = 1048255; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=192 [ target = 1048256; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=192 [ target = 1048256; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=193 [ target = 1048257; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=193 [ target = 1048257; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=194 [ target = 1048258; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=194 [ target = 1048258; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=195 [ target = 1048259; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=195 [ target = 1048259; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=196 [ target = 1048260; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=196 [ target = 1048260; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=197 [ target = 1048261; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=197 [ target = 1048261; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=198 [ target = 1048262; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=198 [ target = 1048262; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=199 [ target = 1048263; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=199 [ target = 1048263; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=200 [ target = 1048264; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=200 [ target = 1048264; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=201 [ target = 1048265; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=201 [ target = 1048265; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=202 [ target = 1048266; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=202 [ target = 1048266; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=203 [ target = 1048267; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=203 [ target = 1048267; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=204 [ target = 1048268; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=204 [ target = 1048268; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=205 [ target = 1048269; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=205 [ target = 1048269; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=206 [ target = 1048270; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=206 [ target = 1048270; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=207 [ target = 1048271; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=207 [ target = 1048271; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=208 [ target = 1048272; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=208 [ target = 1048272; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=209 [ target = 1048273; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=209 [ target = 1048273; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=210 [ target = 1048274; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=210 [ target = 1048274; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=211 [ target = 1048275; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=211 [ target = 1048275; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=212 [ target = 1048276; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=212 [ target = 1048276; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=213 [ target = 1048277; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=213 [ target = 1048277; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=214 [ target = 1048278; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=214 [ target = 1048278; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=215 [ target = 1048279; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=215 [ target = 1048279; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=216 [ target = 1048280; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=216 [ target = 1048280; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=217 [ target = 1048281; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=217 [ target = 1048281; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=218 [ target = 1048282; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=218 [ target = 1048282; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=219 [ target = 1048283; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=219 [ target = 1048283; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=220 [ target = 1048284; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=220 [ target = 1048284; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=221 [ target = 1048285; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=221 [ target = 1048285; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=222 [ target = 1048286; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=222 [ target = 1048286; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=223 [ target = 1048287; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=223 [ target = 1048287; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=224 [ target = 1048288; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=224 [ target = 1048288; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=225 [ target = 1048289; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=225 [ target = 1048289; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=226 [ target = 1048290; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=226 [ target = 1048290; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=227 [ target = 1048291; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=227 [ target = 1048291; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=228 [ target = 1048292; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=228 [ target = 1048292; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=229 [ target = 1048293; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=229 [ target = 1048293; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=230 [ target = 1048294; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=230 [ target = 1048294; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=231 [ target = 1048295; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=231 [ target = 1048295; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=232 [ target = 1048296; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=232 [ target = 1048296; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=233 [ target = 1048297; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=233 [ target = 1048297; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=234 [ target = 1048298; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=234 [ target = 1048298; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=235 [ target = 1048299; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=235 [ target = 1048299; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=236 [ target = 1048300; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=236 [ target = 1048300; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=237 [ target = 1048301; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=237 [ target = 1048301; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=238 [ target = 1048302; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=238 [ target = 1048302; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=239 [ target = 1048303; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=239 [ target = 1048303; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=240 [ target = 1048304; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=240 [ target = 1048304; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=241 [ target = 1048305; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=241 [ target = 1048305; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=242 [ target = 1048306; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=242 [ target = 1048306; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=243 [ target = 1048307; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=243 [ target = 1048307; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=244 [ target = 1048308; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=244 [ target = 1048308; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=245 [ target = 1048309; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=245 [ target = 1048309; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=246 [ target = 1048310; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=246 [ target = 1048310; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=247 [ target = 1048311; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=247 [ target = 1048311; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=248 [ target = 1048312; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=248 [ target = 1048312; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=249 [ target = 1048313; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=249 [ target = 1048313; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=250 [ target = 1048314; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=250 [ target = 1048314; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=251 [ target = 1048315; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=251 [ target = 1048315; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=252 [ target = 1048316; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=252 [ target = 1048316; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=253 [ target = 1048317; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=253 [ target = 1048317; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=254 [ target = 1048318; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=254 [ target = 1048318; ] { export *:2 target; }

tgt_saddrb: target is addr_abs8=255 [ target = 1048319; ] { export *:1 target; }
tgt_saddrw: target is addr_abs8=255 [ target = 1048319; ] { export *:2 target; }


# TODO: see "List of Fixed SFR" - should map on registers. instructions might operate on sfr directly

tgt_sfrb: target is addr_abs8 [ target = 0xfff00 + addr_abs8; ] { export *:1 target; }
tgt_sfrw: target is addr_abs8 [ target = 0xfff00 + addr_abs8; ] { export *:2 target; }

#
# 8-bit data transfer
#


:MOV X, #byte is op=0x50 & X ; byte {
	X = byte;
}

:MOV A, #byte is op=0x51 & A ; byte {
	A = byte;
}

:MOV C, #byte is op=0x52 & C ; byte {
	C = byte;
}

:MOV B, #byte is op=0x53 & B ; byte {
	B = byte;
}

:MOV E, #byte is op=0x54 & E ; byte {
	E = byte;
}

:MOV D, #byte is op=0x55 & D ; byte {
	D = byte;
}

:MOV L, #byte is op=0x56 & L ; byte {
	L = byte;
}

:MOV H, #byte is op=0x57 & H ; byte {
	H = byte;
}


:MOV tgt_saddrb, #byte is op=0xCD ; tgt_saddrb ; byte {
	tgt_saddrb = byte;
}

:MOV tgt_sfrb, #byte is op=0xCE ; tgt_sfrb ; byte {
	tgt_sfrb = byte;
}

:MOV !tgt_addr16b, #byte is op=0xCF ; tgt_addr16b ; byte {
	tgt_addr16b = byte;
}


:MOV A, X is op=0x60 & A & X {
	A = X;
}

:MOV A, C is op=0x62 & A & C {
	A = C;
}

:MOV A, B is op=0x63 & A & B {
	A = B;
}

:MOV A, E is op=0x64 & A & E {
	A = E;
}

:MOV A, D is op=0x65 & A & D {
	A = D;
}

:MOV A, L is op=0x66 & A & L {
	A = L;
}

:MOV A, H is op=0x67 & A & H {
	A = H;
}

:MOV X, A is op=0x70 & X & A {
	X = A;
}

:MOV C, A is op=0x72 & C & A {
	C = A;
}

:MOV B, A is op=0x73 & B & A {
	B = A;
}

:MOV E, A is op=0x74 & E & A {
	E = A;
}

:MOV D, A is op=0x75 & D & A {
	D = A;
}

:MOV L, A is op=0x76 & L & A {
	L = A;
}

:MOV H, A is op=0x77 & H & A {
	H = A;
}


:MOV A, tgt_saddrb is op=0x8D & A ; tgt_saddrb {
	A = tgt_saddrb;
}

:MOV tgt_saddrb, A is op=0x9D & A ; tgt_saddrb {
	tgt_saddrb = A;
}

:MOV A, tgt_sfrb is op=0x8E & A ; tgt_sfrb {
	A = tgt_sfrb;
}

:MOV tgt_sfrb, A is op=0x9E & A ; tgt_sfrb {
	tgt_sfrb = A;
}

:MOV A, !tgt_addr16b is op=0x8F & A ; tgt_addr16b {
	A = tgt_addr16b;
}

:MOV !tgt_addr16b, A is op=0x9F & A ; tgt_addr16b {
	tgt_addr16b = A;
}

:MOV PSW, #byte is PSW & op=0xCE ; op=0xFA ; byte {
	PSW = byte;
}

:MOV A, PSW is A & PSW & op=0x8E ; op=0xFA {
	A = PSW;
}

:MOV PSW, A is PSW & A & op=0x9E ; op=0xFA {
	PSW = A;
}

:MOV ES, #byte is ES & op=0x41 ; byte {
	ES = byte;
}

:MOV ES, tgt_saddrb is ES & op=0x61 ; op=0xB8 ; tgt_saddrb {
	ES = tgt_saddrb;
}

:MOV A, ES is A & ES & op=0x8E ; op=0xFD {
	A = ES;
}

:MOV ES, A is ES & A & op=0x9E ; op=0xFD {
	ES = A;
}

:MOV CS, #byte is CS & op=0xCE ; op=0xFC ; byte {
	CS = byte;
}

:MOV A, CS is A & CS & op=0x8E ; op=0xFC {
	A = CS;
}

:MOV CS, A is CS & A & op=0x9E ; op=0xFC {
	CS = A;
}


:MOV A, [DE] is A & DE & op=137 {
	local addr:4 = segment(0xF:2, DE);
	A = *:1 addr;
}

:MOV [DE], A is DE & A & op=153 {
	local addr:4 = segment(0xF:2, DE);
	*:1 addr = A;
}

:MOV [DE+byte1], #byte2 is DE & op=202 ; byte1 ; byte2 {
	local addr:4 = segment(0xF:2, DE + byte1);
	*:1 addr = byte2;
}

:MOV A, [DE+byte] is A & DE & op=138 ; byte {
	local addr:4 = segment(0xF:2, DE + byte);
	A = *:1 addr;
}

:MOV [DE+byte], A is DE & A & op=154 ; byte {
	local addr:4 = segment(0xF:2, DE + byte);
	*:1 addr = A;
}

:MOV A, [HL] is A & HL & op=139 {
	local addr:4 = segment(0xF:2, HL);
	A = *:1 addr;
}

:MOV [HL], A is HL & A & op=155 {
	local addr:4 = segment(0xF:2, HL);
	*:1 addr = A;
}

:MOV [HL+byte1], #byte2 is HL & op=204 ; byte1 ; byte2 {
	local addr:4 = segment(0xF:2, HL + byte1);
	*:1 addr = byte2;
}

:MOV A, [HL+byte] is A & HL & op=140 ; byte {
	local addr:4 = segment(0xF:2, HL + byte);
	A = *:1 addr;
}

:MOV [HL+byte], A is HL & A & op=156 ; byte {
	local addr:4 = segment(0xF:2, HL + byte);
	*:1 addr = A;
}


:MOV A, [HL+B] is A & HL & B & op=0x61 ; op=0xC9 {
	local addr:4 = segment(0xF:2, HL + zext(B));
	A = *:1 addr;
}

:MOV [HL+B], A is HL & B & A & op=0x61 ; op=0xD9 {
	local addr:4 = segment(0xF:2, HL + zext(B));
	*:1 addr = A;
}

:MOV A, [HL+C] is A & HL & C & op=0x61 ; op=0xE9 {
	local addr:4 = segment(0xF:2, HL + zext(C));
	A = *:1 addr;
}

:MOV [HL+C], A is HL & C & A & op=0x61 ; op=0xF9 {
	local addr:4 = segment(0xF:2, HL + zext(C));
	*:1 addr = A;
}

:MOV word[B], #byte is B & op=0x19 ; word ; byte {
	local addr:4 = segment(0xF:2, word:2) + zext(B);
	*:1 addr = byte;
}

:MOV A, word[B] is A & B & op=0x09 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(B);
	A = *:1 addr;
}

:MOV word[B], A is B & A & op=0x18 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(B);
	*:1 addr = A;
}

:MOV word[C], #byte is C & op=0x38 ; word ; byte {
	local addr:4 = segment(0xF:2, word:2) + zext(C);
	*:1 addr = byte;
}

:MOV A, word[C] is A & C & op=0x29 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(C);
	A = *:1 addr;
}

:MOV word[C], A is C & A & op=0x28 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(C);
	*:1 addr = A;
}

:MOV word[BC], #byte is BC & op=0x39 ; word ; byte {
	local addr:4 = segment(0xF:2, word:2) + zext(BC);
	*:1 addr = byte;
}

:MOV A, word[BC] is A & BC & op=0x49 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(BC);
	A = *:1 addr;
}

:MOV word[BC], A is BC & A & op=0x48 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(BC);
	*:1 addr = A;
}

:MOV [SP+byte1], #byte2 is SP & op=0xC8 ; byte1 ; byte2 {
	local addr:4 = segment(0xF:2, SP + byte1);
	*:1 addr = byte2;
}

:MOV A, [SP+byte] is A & SP & op=0x88 ; byte {
	local addr:4 = segment(0xF:2, SP + byte);
	A = *:1 addr;
}

:MOV [SP+byte], A is SP & A & op=0x98 ; byte {
	local addr:4 = segment(0xF:2, SP + byte);
	*:1 addr = A;
}


:MOV B, tgt_saddrb is B & op=232 ; tgt_saddrb {
	B = tgt_saddrb;
}

:MOV B, !tgt_addr16b is B & op=233 ; tgt_addr16b {
	B = tgt_addr16b;
}

:MOV C, tgt_saddrb is C & op=248 ; tgt_saddrb {
	C = tgt_saddrb;
}

:MOV C, !tgt_addr16b is C & op=249 ; tgt_addr16b {
	C = tgt_addr16b;
}

:MOV X, tgt_saddrb is X & op=216 ; tgt_saddrb {
	X = tgt_saddrb;
}

:MOV X, !tgt_addr16b is X & op=217 ; tgt_addr16b {
	X = tgt_addr16b;
}


:MOV tgt_esaddr16b, #byte is op=0x11 ; op=0xCF ; tgt_esaddr16b ; byte {
	tgt_esaddr16b = byte;
}

:MOV A, tgt_esaddr16b is A & op=0x11 ; op=0x8F ; tgt_esaddr16b {
	A = tgt_esaddr16b;
}

:MOV tgt_esaddr16b, A is A & op=0x11 ; op=0x9F ; tgt_esaddr16b {
	tgt_esaddr16b = A;
}

:MOV A, ES:[DE] is A & ES & DE & op=0x11 ; op=0x89 {
	local addr:4 = segment(ES, DE);
	A = *:1 addr;
}

:MOV ES:[DE], A is ES & DE & A & op=0x11 ; op=0x99 {
	local addr:4 = segment(ES, DE);
	*:1 addr = A;
}

:MOV ES:[DE+byte1], #byte2 is ES & DE & op=0x11 ; op=0xCA ; byte1 ; byte2 {
	local addr:4 = segment(ES, DE + byte1);
	*:1 addr = byte2;
}

:MOV A, ES:[DE+byte] is A & ES & DE & op=0x11 ; op=0x8A ; byte {
	local addr:4 = segment(ES, DE + byte);
	A = *:1 addr;
}

:MOV ES:[DE+byte], A is ES & DE & A & op=0x11 ; op=0x9A ; byte {
	local addr:4 = segment(ES, DE + byte);
	*:1 addr = A;
}

:MOV A, ES:[HL] is A & ES & HL & op=0x11 ; op=0x8B {
	local addr:4 = segment(ES, HL);
	A = *:1 addr;
}

:MOV ES:[HL], A is ES & HL & A & op=0x11 ; op=0x9B {
	local addr:4 = segment(ES, HL);
	*:1 addr = A;
}

:MOV ES:[HL+byte1], #byte2 is ES & HL & op=0x11 ; op=0xCC ; byte1 ; byte2 {
	local addr:4 = segment(ES, HL + byte1);
	*:1 addr = byte2;
}

:MOV A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=0x8C ; byte {
	local addr:4 = segment(ES, HL + byte);
	A = *:1 addr;
}

:MOV ES:[HL+byte], A is ES & HL & A ; op=0x11 ; op=0x9C ; byte {
	local addr:4 = segment(ES, HL + byte);
	*:1 addr = A;
}

:MOV A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=0xC9 {
	local addr:4 = segment(ES, HL + zext(B));
	A = *:1 addr;
}

:MOV ES:[HL+B], A is ES & HL & B & A & op=0x11 ; op=0x61 ; op=0xD9 {
	local addr:4 = segment(ES, HL + zext(B));
	*:1 addr = A;
}

:MOV A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=0xE9 {
	local addr:4 = segment(ES, HL + zext(C));
	A = *:1 addr;
}

:MOV ES:[HL+C], A is ES & HL & C & A & op=0x11 ; op=0x61 ; op=0xF9 {
	local addr:4 = segment(ES, HL + zext(C));
	*:1 addr = A;
}

:MOV ES:word[B], #byte is ES & B & op=0x11 ; op=0x19 ; word ; byte {
	local addr:4 = segment(ES, word:2) + zext(B);
	*:1 addr = byte;
}

:MOV A, ES:word[B] is A & ES & B & op=0x11 ; op=0x09 ; word {
	local addr:4 = segment(ES, word:2) + zext(B);
	A = *:1 addr;
}

:MOV ES:word[B], A is ES &  B & A & op=0x11 ; op=0x18 ; word {
	local addr:4 = segment(ES, word:2) + zext(B);
	*:1 addr = A;
}

:MOV ES:word[C], #byte is ES & C & op=0x11 ; op=0x38 ; word ; byte {
	local addr:4 = segment(ES, word:2) + zext(C);
	*:1 addr = byte;
}

:MOV A, ES:word[C] is A & ES & C & op=0x11 ; op=0x29 ; word {
	local addr:4 = segment(ES, word:2) + zext(C);
	A = *:1 addr;
}

:MOV ES:word[C], A is ES & C & A & op=0x11 ; op=0x28 ; word {
	local addr:4 = segment(ES, word:2) + zext(C);
	*:1 addr = A;
}

:MOV ES:word[BC], #byte is ES & BC & op=0x11 ; op=0x39 ; word ; byte {
	local addr:4 = segment(ES, word:2) + zext(BC);
	*:1 addr = byte;
}

:MOV A, ES:word[BC] is A & ES & BC & op=0x11 ; op=0x49 ; word {
	local addr:4 = segment(ES, word:2) + zext(BC);
	A = *:1 addr;
}

:MOV ES:word[BC], A is ES & BC & A & op=0x11 ; op=0x48 ; word {
	local addr:4 = segment(ES, word:2) + zext(BC);
	*:1 addr = A;
}

:MOV B, tgt_esaddr16b is B & op=0x11 ; op=0xE9 ; tgt_esaddr16b {
	B = tgt_esaddr16b;
}

:MOV C, tgt_esaddr16b is C & op=0x11 ; op=0xF9 ; tgt_esaddr16b {
	C = tgt_esaddr16b;
}

:MOV X, tgt_esaddr16b is X & op=0x11 ; op=0xD9 ; tgt_esaddr16b {
	X = tgt_esaddr16b;
}



:XCH A, X is A & X & op=0x08 {
	
	local a = A;
	local b = X;
	A = b;
	X = a;

}


:XCH A, C is A & C & op=0x61 ; op=0x8A {
	
	local a = A;
	local b = C;
	A = b;
	C = a;

}

:XCH A, B is A & B & op=0x61 ; op=0x8B {
	
	local a = A;
	local b = B;
	A = b;
	B = a;

}

:XCH A, E is A & E & op=0x61 ; op=0x8C {
	
	local a = A;
	local b = E;
	A = b;
	E = a;

}

:XCH A, D is A & D & op=0x61 ; op=0x8D {
	
	local a = A;
	local b = D;
	A = b;
	D = a;

}

:XCH A, L is A & L & op=0x61 ; op=0x8E {
	
	local a = A;
	local b = L;
	A = b;
	L = a;

}

:XCH A, H is A & H & op=0x61 ; op=0x8F {
	
	local a = A;
	local b = H;
	A = b;
	H = a;

}


:XCH A, tgt_saddrb is A & op=0x61 ; op=0xA8 ; tgt_saddrb {
	
	local a = A;
	local b = tgt_saddrb;
	A = b;
	tgt_saddrb = a;

}

:XCH A, tgt_sfrb is A & op=0x61 ; op=0xAB ; tgt_sfrb {
	
	local a = A;
	local b = tgt_sfrb;
	A = b;
	tgt_sfrb = a;

}

:XCH A, !tgt_addr16b is A & op=0x61 ; op=0xAA ; tgt_addr16b {
	
	local a = A;
	local b = tgt_addr16b;
	A = b;
	tgt_addr16b = a;

}

:XCH A, [DE] is A & DE & op=0x61 ; op=0xAE {
	local addr:4 = segment(0xF:2, DE);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, [DE+byte] is A & DE & op=0x61 ; op=0xAF ; byte {
	local addr:4 = segment(0xF:2, DE);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, [HL] is A & HL & op=0x61 ; op=0xAC {
	local addr:4 = segment(0xF:2, HL);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, [HL+byte] is A & HL & op=0x61 ; op=0xAD ; byte {
	local addr:4 = segment(0xF:2, HL + byte);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, [HL+B] is A & HL & B & op=0x61 ; op=0xB9 {
	local addr:4 = segment(0xF:2, HL + zext(B));
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, [HL+C] is A & HL & C & op=0x61 ; op=0xA9 {
	local addr:4 = segment(0xF:2, HL + zext(C));
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, tgt_esaddr16b is A & op=0x11 ; op=0x61 ; op=0xAA ; tgt_esaddr16b {
	
	local a = A;
	local b = tgt_esaddr16b;
	A = b;
	tgt_esaddr16b = a;

}

:XCH A, ES:[DE] is ES & A & DE & op=0x11 ; op=0x61 ; op=0xAE {
	local addr:4 = segment(ES, DE);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, ES:[DE+byte] is ES & A & DE & op=0x11 ; op=0x61 ; op=0xAF ; byte {
	local addr:4 = segment(ES, DE);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, ES:[HL] is ES & A & HL & op=0x11 ; op=0x61 ; op=0xAC {
	local addr:4 = segment(ES, HL);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, ES:[HL+byte] is ES & A & HL & op=0x11 ; op=0x61 ; op=0xAD ; byte {
	local addr:4 = segment(ES, HL + byte);
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, ES:[HL+B] is ES & A & HL & B & op=0x11 ; op=0x61 ; op=0xB9 {
	local addr:4 = segment(ES, HL + zext(B));
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}

:XCH A, ES:[HL+C] is ES & A & HL & C & op=0x11 ; op=0x61 ; op=0xA9 {
	local addr:4 = segment(ES, HL + zext(C));
	
	local a = A;
	local b = *:1 addr;
	A = b;
	*:1 addr = a;

}






	:ONEB A is A & op=225 {
		
	A = 1;

	}
	:ONEB X is X & op=224 {
		
	X = 1;

	}
	:ONEB B is B & op=227 {
		
	B = 1;

	}
	:ONEB C is C & op=226 {
		
	C = 1;

	}

	:ONEB tgt_saddrb is op=228 ; tgt_saddrb {
		
	tgt_saddrb = 1;

	}

	:ONEB !tgt_addr16b is op=229 ; tgt_addr16b {
		
	tgt_addr16b = 1;

	}

	:ONEB tgt_esaddr16b is op=0x11 ; op=229 ; tgt_esaddr16b {
		
	tgt_esaddr16b = 1;

	}

	:CLRB A is A & op=241 {
		
	A = 0;

	}
	:CLRB X is X & op=240 {
		
	X = 0;

	}
	:CLRB B is B & op=243 {
		
	B = 0;

	}
	:CLRB C is C & op=242 {
		
	C = 0;

	}

	:CLRB tgt_saddrb is op=244 ; tgt_saddrb {
		
	tgt_saddrb = 0;

	}

	:CLRB !tgt_addr16b is op=245 ; tgt_addr16b {
		
	tgt_addr16b = 0;

	}

	:CLRB tgt_esaddr16b is op=0x11 ; op=245 ; tgt_esaddr16b {
		
	tgt_esaddr16b = 0;

	}


:MOVS [HL+byte], X is HL & X & op=0x61 ; op=0xCE ; byte {
	local addr:4 = segment(0xF:2, HL + byte);
	*:1 addr = X;
	$(Z) = (X == 0);
	$(CY) = (X == 0) || (A == 0);
}

:MOVS ES:[HL+byte], X is ES & HL & X & op=0x11 ; op=0x61 ; op=0xCE ; byte {
	local addr:4 = segment(ES, HL + byte);
	*:1 addr = X;
	$(Z) = (X == 0);
	$(CY) = (X == 0) || (A == 0);
}

#
# 16-bit data transfer
#


:MOVW AX, #word is op=0x30 & AX ; word {
	AX = word;
}

:MOVW BC, #word is op=0x32 & BC ; word {
	BC = word;
}

:MOVW DE, #word is op=0x34 & DE ; word {
	DE = word;
}

:MOVW HL, #word is op=0x36 & HL ; word {
	HL = word;
}


:MOVW tgt_saddrw, #word is op=0xC9 ; tgt_saddrw ; word {
	tgt_saddrw = word;
}

:MOVW tgt_sfrw, #word is op=0xCB ; tgt_sfrw ; word {
	tgt_sfrw = word;
}

:MOVW AX, tgt_saddrw is AX & op=0xAD ; tgt_saddrw {
	AX = tgt_saddrw;
}

:MOVW tgt_saddrw, AX is AX & op=0xBD ; tgt_saddrw {
	tgt_saddrw = AX;
}

:MOVW AX, tgt_sfrw is AX & op=0xAE ; tgt_sfrw {
	AX = tgt_sfrw;
}

:MOVW tgt_sfrw, AX is AX & op=0xBE ; tgt_sfrw {
	tgt_sfrw = AX;
}


	:MOVW AX,BC is AX & BC & op=0x13 {
		AX = BC;
	}

	:MOVW AX,DE is AX & DE & op=0x15 {
		AX = DE;
	}

	:MOVW AX,HL is AX & HL & op=0x17 {
		AX = HL;
	}

	:MOVW BC,AX is BC & AX & op=0x12 {
		BC = AX;
	}

	:MOVW DE,AX is DE & AX & op=0x14 {
		DE = AX;
	}

	:MOVW HL,AX is HL & AX & op=0x16 {
		HL = AX;
	}


:MOVW AX, !tgt_addr16w is AX & op=0xAF ; tgt_addr16w {
	AX = tgt_addr16w;
}

:MOVW !tgt_addr16w, AX is AX & op=0xBF ; tgt_addr16w {
	tgt_addr16w = AX;
}

:MOVW AX, [DE] is AX & DE & op=0xA9 {
	local addr:4 = segment(0xF:2, DE);
	AX = *:2 addr;
}

:MOVW [DE], AX is DE & AX & op=0xB9 {
	local addr:4 = segment(0xF:2, DE);
	*:2 addr = AX;
}

:MOVW AX, [DE+byte] is AX & DE & op=0xAA ; byte {
	local addr:4 = segment(0xF:2, DE + byte);
	AX = *:2 addr;
}

:MOVW [DE+byte], AX is DE & AX & op=0xBA ; byte {
	local addr:4 = segment(0xF:2, DE + byte);
	*:2 addr = AX;
}

:MOVW AX, [HL] is AX & HL & op=0xAB {
	local addr:4 = segment(0xF:2, HL);
	AX = *:2 addr;
}

:MOVW [HL], AX is HL & AX & op=0xBB {
	local addr:4 = segment(0xF:2, HL);
	*:2 addr = AX;
}

:MOVW AX, [HL+byte] is AX & HL & op=0xAC ; byte {
	local addr:4 = segment(0xF:2, HL + byte);
	AX = *:2 addr;
}

:MOVW [HL+byte], AX is HL & AX & op=0xBC ; byte {
	local addr:4 = segment(0xF:2, HL + byte);
	*:2 addr = AX;
}

:MOVW AX, word[B] is AX & B & op=0x59 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(B);
	AX = *:2 addr;
}

:MOVW word[B], AX is B & AX & op=0x58 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(B);
	*:2 addr = AX;
}

:MOVW AX, word[C] is AX & C & op=0x69 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(C);
	AX = *:2 addr;
}

:MOVW word[C], AX is C & AX & op=0x68 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(C);
	*:2 addr = AX;
}

:MOVW AX, word[BC] is AX & BC & op=0x79 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(BC);
	AX = *:2 addr;
}

:MOVW word[BC], AX is BC & AX & op=0x78 ; word {
	local addr:4 = segment(0xF:2, word:2) + zext(BC);
	*:2 addr = AX;
}

:MOVW AX, [SP+byte] is AX & SP & op=0xA8 ; byte {
	local addr:4 = segment(0xF:2, SP + byte);
	AX = *:2 addr;
}

:MOVW [SP+byte], AX is SP & AX & op=0xB8 ; byte {
	local addr:4 = segment(0xF:2, SP + byte);
	*:2 addr = AX;
}

:MOVW BC, tgt_saddrw is BC & op=0xDA ; tgt_saddrw {
	BC = tgt_saddrw;
}

:MOVW BC, !tgt_addr16w is BC & op=0xDB ; tgt_addr16w {
	BC = tgt_addr16w;
}

:MOVW DE, tgt_saddrw is DE & op=0xEA ; tgt_saddrw {
	DE = tgt_saddrw;
}

:MOVW DE, !tgt_addr16w is DE & op=0xEB ; tgt_addr16w {
	DE = tgt_addr16w;
}

:MOVW HL, tgt_saddrw is HL & op=0xFA ; tgt_saddrw {
	HL = tgt_saddrw;
}

:MOVW HL, !tgt_addr16w is HL & op=0xFb ; tgt_addr16w {
	HL = tgt_addr16w;
}

:MOVW AX, tgt_esaddr16w is AX & op=0x11 ; op=0xAF ; tgt_esaddr16w {
	AX = tgt_esaddr16w;
}

:MOVW tgt_esaddr16w, AX is AX & op=0x11 ; op=0xBF ; tgt_esaddr16w {
	tgt_esaddr16w = AX;
}

:MOVW AX, ES:[DE] is AX & ES & DE & op=0x11 ; op=0xA9 {
	local addr:4 = segment(ES, DE);
	AX = *:2 addr;
}

:MOVW ES:[DE], AX is ES & DE & AX & op=0x11 ; op=0xB9 {
	local addr:4 = segment(ES, DE);
	*:2 addr = AX;
}

:MOVW AX, ES:[DE+byte] is AX & ES & DE & op=0x11 ; op=0xAA ; byte {
	local addr:4 = segment(ES, DE + byte);
	AX = *:2 addr;
}

:MOVW ES:[DE+byte], AX is ES & DE & AX & op=0x11 ; op=0xBA ; byte {
	local addr:4 = segment(ES, DE + byte);
	*:2 addr = AX;
}

:MOVW AX, ES:[HL] is AX & ES & HL & op=0x11 ; op=0xAB {
	local addr:4 = segment(ES, HL);
	AX = *:2 addr;
}

:MOVW ES:[HL], AX is ES & HL & AX & op=0x11 ; op=0xBB {
	local addr:4 = segment(ES, HL);
	*:2 addr = AX;
}

:MOVW AX, ES:[HL+byte] is AX & ES & HL & op=0x11 ; op=0xAC ; byte {
	local addr:4 = segment(ES, HL + byte);
	AX = *:2 addr;
}

:MOVW ES:[HL+byte], AX is ES & HL & AX & op=0x11 ; op=0xBC ; byte {
	local addr:4 = segment(ES, HL + byte);
	*:2 addr = AX;
}

:MOVW AX, ES:word[B] is AX & ES & B & op=0x11 ; op=0x59 ; word {
	local addr:4 = segment(ES, word:2) + zext(B);
	AX = *:2 addr;
}

:MOVW ES:word[B], AX is ES & B & AX & op=0x11 ; op=0x58 ; word {
	local addr:4 = segment(ES, word:2) + zext(B);
	*:2 addr = AX;
}

:MOVW AX, ES:word[C] is AX & ES & C & op=0x11 ; op=0x69 ; word {
	local addr:4 = segment(ES, word:2) + zext(C);
	AX = *:2 addr;
}

:MOVW ES:word[C], AX is ES & C & AX & op=0x11 ; op=0x68 ; word {
	local addr:4 = segment(ES, word:2) + zext(C);
	*:2 addr = AX;
}

:MOVW AX, ES:word[BC] is AX & ES & BC & op=0x11 ; op=0x79 ; word {
	local addr:4 = segment(ES, word:2) + zext(BC);
	AX = *:2 addr;
}

:MOVW ES:word[BC], AX is ES & BC & AX & op=0x11 ; op=0x78 ; word {
	local addr:4 = segment(ES, word:2) + zext(BC);
	*:2 addr = AX;
}

:MOVW BC, tgt_esaddr16w is BC & op=0x11 ; op=0xDB ; tgt_esaddr16w {
	BC = tgt_esaddr16w;
}

:MOVW DE, tgt_esaddr16w is DE & op=0x11 ; op=0xEB ; tgt_esaddr16w {
	DE = tgt_esaddr16w;
}

:MOVW HL, tgt_esaddr16w is HL & op=0x11 ; op=0xFB ; tgt_esaddr16w {
	HL = tgt_esaddr16w;
}

:XCHW AX, BC is AX & BC & op=0x33 {
	local tmp = AX;
	AX = BC;
	BC = tmp;
}

:XCHW AX, DE is AX & DE & op=0x35 {
	local tmp = AX;
	AX = DE;
	DE = tmp;
}

:XCHW AX, HL is AX & HL & op=0x37 {
	local tmp = AX;
	AX = HL;
	HL = tmp;
}

:ONEW AX is op=0xE6 & AX {
	AX = 1;
}

:ONEW BC is op=0xE7 & BC {
	BC = 1;
}

:CLRW AX is op=0xF6 & AX {
	AX = 0;
}

:CLRW BC is op=0xF7 & BC {
	BC = 0;
}

#
# 8-bit operation
#


















	:ADD A, #byte is A & op=12 ; byte {
		
	local op1 = A;
	local op2 = byte;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD tgt_saddrb, #byte is op=10 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	tgt_saddrb = res;

	}

	:ADD A", A" is A & op=0x61 ; op=1 {
		
	local op1 = A;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	
	:ADD A, X is A & X & op=0x61 ; op=8 {
		
	local op1 = A;
	local op2 = X;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}
	
	:ADD A, C is A & C & op=0x61 ; op=10 {
		
	local op1 = A;
	local op2 = C;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}
	
	:ADD A, B is A & B & op=0x61 ; op=11 {
		
	local op1 = A;
	local op2 = B;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}
	
	:ADD A, E is A & E & op=0x61 ; op=12 {
		
	local op1 = A;
	local op2 = E;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}
	
	:ADD A, D is A & D & op=0x61 ; op=13 {
		
	local op1 = A;
	local op2 = D;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}
	
	:ADD A, L is A & L & op=0x61 ; op=14 {
		
	local op1 = A;
	local op2 = L;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}
	
	:ADD A, H is A & H & op=0x61 ; op=15 {
		
	local op1 = A;
	local op2 = H;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}
	
	:ADD X, A is X & A & op=0x61 ; op=0 {
		
	local op1 = X;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	X = res;

	}
	
	:ADD C, A is C & A & op=0x61 ; op=2 {
		
	local op1 = C;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	C = res;

	}
	
	:ADD B, A is B & A & op=0x61 ; op=3 {
		
	local op1 = B;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	B = res;

	}
	
	:ADD E, A is E & A & op=0x61 ; op=4 {
		
	local op1 = E;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	E = res;

	}
	
	:ADD D, A is D & A & op=0x61 ; op=5 {
		
	local op1 = D;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	D = res;

	}
	
	:ADD L, A is L & A & op=0x61 ; op=6 {
		
	local op1 = L;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	L = res;

	}
	
	:ADD H, A is H & A & op=0x61 ; op=7 {
		
	local op1 = H;
	local op2 = A;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	H = res;

	}
	

	:ADD A, tgt_saddrb is A & op=11 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, !tgt_addr16b is A & op=15 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, [HL] is A & HL & op=13 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, [HL+byte] is A & HL & op=14 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, [HL+B] is A & HL & B & op=0x61 ; op=128 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, [HL+C] is A & HL & C & op=0x61 ; op=130 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, tgt_esaddr16b is A & op=0x11 ; op=15 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, ES:[HL] is A & ES & HL & op=0x11 ; op=13 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=14 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=128 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADD A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=130 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf)) & 0x10) == 0x10);
	$(CY) = carry(op1, op2);
	A = res;

	}

	:ADDC A, #byte is A & op=28 ; byte {
		
	local op1 = A;
	local op2 = byte;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC tgt_saddrb, #byte is op=26 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	tgt_saddrb = res;

	}

	:ADDC A", A" is A & op=0x61 ; op=17 {
		
	local op1 = A;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	
	:ADDC A, X is A & X & op=0x61 ; op=24 {
		
	local op1 = A;
	local op2 = X;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:ADDC A, C is A & C & op=0x61 ; op=26 {
		
	local op1 = A;
	local op2 = C;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:ADDC A, B is A & B & op=0x61 ; op=27 {
		
	local op1 = A;
	local op2 = B;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:ADDC A, E is A & E & op=0x61 ; op=28 {
		
	local op1 = A;
	local op2 = E;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:ADDC A, D is A & D & op=0x61 ; op=29 {
		
	local op1 = A;
	local op2 = D;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:ADDC A, L is A & L & op=0x61 ; op=30 {
		
	local op1 = A;
	local op2 = L;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:ADDC A, H is A & H & op=0x61 ; op=31 {
		
	local op1 = A;
	local op2 = H;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:ADDC X, A is X & A & op=0x61 ; op=16 {
		
	local op1 = X;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	X = res;

	}
	
	:ADDC C, A is C & A & op=0x61 ; op=18 {
		
	local op1 = C;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	C = res;

	}
	
	:ADDC B, A is B & A & op=0x61 ; op=19 {
		
	local op1 = B;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	B = res;

	}
	
	:ADDC E, A is E & A & op=0x61 ; op=20 {
		
	local op1 = E;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	E = res;

	}
	
	:ADDC D, A is D & A & op=0x61 ; op=21 {
		
	local op1 = D;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	D = res;

	}
	
	:ADDC L, A is L & A & op=0x61 ; op=22 {
		
	local op1 = L;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	L = res;

	}
	
	:ADDC H, A is H & A & op=0x61 ; op=23 {
		
	local op1 = H;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	H = res;

	}
	

	:ADDC A, tgt_saddrb is A & op=27 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, !tgt_addr16b is A & op=31 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, [HL] is A & HL & op=29 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, [HL+byte] is A & HL & op=30 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, [HL+B] is A & HL & B & op=0x61 ; op=144 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, [HL+C] is A & HL & C & op=0x61 ; op=146 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, tgt_esaddr16b is A & op=0x11 ; op=31 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, ES:[HL] is A & ES & HL & op=0x11 ; op=29 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=30 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=144 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:ADDC A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=146 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 + op2;
	$(AC) = ((((op1 & 0xf) + (op2 & 0xf) + cy) & 0x10) == 0x10);
	$(CY) = carry(op1, op2) || carry(tmp, cy);
	local res = tmp + cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUB A, #byte is A & op=44 ; byte {
		
	local op1 = A;
	local op2 = byte;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB tgt_saddrb, #byte is op=42 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	tgt_saddrb = res;

	}

	:SUB A", A" is A & op=0x61 ; op=33 {
		
	local op1 = A;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	
	:SUB A, X is A & X & op=0x61 ; op=40 {
		
	local op1 = A;
	local op2 = X;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}
	
	:SUB A, C is A & C & op=0x61 ; op=42 {
		
	local op1 = A;
	local op2 = C;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}
	
	:SUB A, B is A & B & op=0x61 ; op=43 {
		
	local op1 = A;
	local op2 = B;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}
	
	:SUB A, E is A & E & op=0x61 ; op=44 {
		
	local op1 = A;
	local op2 = E;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}
	
	:SUB A, D is A & D & op=0x61 ; op=45 {
		
	local op1 = A;
	local op2 = D;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}
	
	:SUB A, L is A & L & op=0x61 ; op=46 {
		
	local op1 = A;
	local op2 = L;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}
	
	:SUB A, H is A & H & op=0x61 ; op=47 {
		
	local op1 = A;
	local op2 = H;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}
	
	:SUB X, A is X & A & op=0x61 ; op=32 {
		
	local op1 = X;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	X = res;

	}
	
	:SUB C, A is C & A & op=0x61 ; op=34 {
		
	local op1 = C;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	C = res;

	}
	
	:SUB B, A is B & A & op=0x61 ; op=35 {
		
	local op1 = B;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	B = res;

	}
	
	:SUB E, A is E & A & op=0x61 ; op=36 {
		
	local op1 = E;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	E = res;

	}
	
	:SUB D, A is D & A & op=0x61 ; op=37 {
		
	local op1 = D;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	D = res;

	}
	
	:SUB L, A is L & A & op=0x61 ; op=38 {
		
	local op1 = L;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	L = res;

	}
	
	:SUB H, A is H & A & op=0x61 ; op=39 {
		
	local op1 = H;
	local op2 = A;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	H = res;

	}
	

	:SUB A, tgt_saddrb is A & op=43 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, !tgt_addr16b is A & op=47 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, [HL] is A & HL & op=45 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, [HL+byte] is A & HL & op=46 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, [HL+B] is A & HL & B & op=0x61 ; op=160 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, [HL+C] is A & HL & C & op=0x61 ; op=162 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, tgt_esaddr16b is A & op=0x11 ; op=47 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, ES:[HL] is A & ES & HL & op=0x11 ; op=45 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=46 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=160 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUB A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=162 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);
	A = res;

	}

	:SUBC A, #byte is A & op=60 ; byte {
		
	local op1 = A;
	local op2 = byte;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC tgt_saddrb, #byte is op=58 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	tgt_saddrb = res;

	}

	:SUBC A", A" is A & op=0x61 ; op=49 {
		
	local op1 = A;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	
	:SUBC A, X is A & X & op=0x61 ; op=56 {
		
	local op1 = A;
	local op2 = X;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:SUBC A, C is A & C & op=0x61 ; op=58 {
		
	local op1 = A;
	local op2 = C;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:SUBC A, B is A & B & op=0x61 ; op=59 {
		
	local op1 = A;
	local op2 = B;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:SUBC A, E is A & E & op=0x61 ; op=60 {
		
	local op1 = A;
	local op2 = E;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:SUBC A, D is A & D & op=0x61 ; op=61 {
		
	local op1 = A;
	local op2 = D;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:SUBC A, L is A & L & op=0x61 ; op=62 {
		
	local op1 = A;
	local op2 = L;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:SUBC A, H is A & H & op=0x61 ; op=63 {
		
	local op1 = A;
	local op2 = H;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}
	
	:SUBC X, A is X & A & op=0x61 ; op=48 {
		
	local op1 = X;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	X = res;

	}
	
	:SUBC C, A is C & A & op=0x61 ; op=50 {
		
	local op1 = C;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	C = res;

	}
	
	:SUBC B, A is B & A & op=0x61 ; op=51 {
		
	local op1 = B;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	B = res;

	}
	
	:SUBC E, A is E & A & op=0x61 ; op=52 {
		
	local op1 = E;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	E = res;

	}
	
	:SUBC D, A is D & A & op=0x61 ; op=53 {
		
	local op1 = D;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	D = res;

	}
	
	:SUBC L, A is L & A & op=0x61 ; op=54 {
		
	local op1 = L;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	L = res;

	}
	
	:SUBC H, A is H & A & op=0x61 ; op=55 {
		
	local op1 = H;
	local op2 = A;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	H = res;

	}
	

	:SUBC A, tgt_saddrb is A & op=59 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, !tgt_addr16b is A & op=63 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, [HL] is A & HL & op=61 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, [HL+byte] is A & HL & op=62 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, [HL+B] is A & HL & B & op=0x61 ; op=176 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, [HL+C] is A & HL & C & op=0x61 ; op=178 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, tgt_esaddr16b is A & op=0x11 ; op=63 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, ES:[HL] is A & ES & HL & op=0x11 ; op=61 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=62 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=176 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:SUBC A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=178 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local cy = $(CY);
	local tmp = op1 - op2;
	$(AC) = ((op1 & 0xf) < (op2 & 0xf)) || ((op1 & 0xf) < (op2 & 0xf) + cy);  # TODO: is this correct?
	$(CY) = (0:2 + zext(op1) < 0:2 + zext(op2) + zext(cy));
	local res = tmp - cy;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, #byte is A & op=92 ; byte {
		
	local op1 = A;
	local op2 = byte;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND tgt_saddrb, #byte is op=90 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	local res = op1 & op2;
	$(Z) = (res == 0);
	tgt_saddrb = res;

	}

	:AND A", A" is A & op=0x61 ; op=81 {
		
	local op1 = A;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	
	:AND A, X is A & X & op=0x61 ; op=88 {
		
	local op1 = A;
	local op2 = X;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:AND A, C is A & C & op=0x61 ; op=90 {
		
	local op1 = A;
	local op2 = C;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:AND A, B is A & B & op=0x61 ; op=91 {
		
	local op1 = A;
	local op2 = B;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:AND A, E is A & E & op=0x61 ; op=92 {
		
	local op1 = A;
	local op2 = E;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:AND A, D is A & D & op=0x61 ; op=93 {
		
	local op1 = A;
	local op2 = D;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:AND A, L is A & L & op=0x61 ; op=94 {
		
	local op1 = A;
	local op2 = L;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:AND A, H is A & H & op=0x61 ; op=95 {
		
	local op1 = A;
	local op2 = H;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:AND X, A is X & A & op=0x61 ; op=80 {
		
	local op1 = X;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	X = res;

	}
	
	:AND C, A is C & A & op=0x61 ; op=82 {
		
	local op1 = C;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	C = res;

	}
	
	:AND B, A is B & A & op=0x61 ; op=83 {
		
	local op1 = B;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	B = res;

	}
	
	:AND E, A is E & A & op=0x61 ; op=84 {
		
	local op1 = E;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	E = res;

	}
	
	:AND D, A is D & A & op=0x61 ; op=85 {
		
	local op1 = D;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	D = res;

	}
	
	:AND L, A is L & A & op=0x61 ; op=86 {
		
	local op1 = L;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	L = res;

	}
	
	:AND H, A is H & A & op=0x61 ; op=87 {
		
	local op1 = H;
	local op2 = A;
	local res = op1 & op2;
	$(Z) = (res == 0);
	H = res;

	}
	

	:AND A, tgt_saddrb is A & op=91 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, !tgt_addr16b is A & op=95 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, [HL] is A & HL & op=93 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, [HL+byte] is A & HL & op=94 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, [HL+B] is A & HL & B & op=0x61 ; op=208 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, [HL+C] is A & HL & C & op=0x61 ; op=210 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, tgt_esaddr16b is A & op=0x11 ; op=95 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, ES:[HL] is A & ES & HL & op=0x11 ; op=93 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=94 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=208 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:AND A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=210 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 & op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, #byte is A & op=108 ; byte {
		
	local op1 = A;
	local op2 = byte;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR tgt_saddrb, #byte is op=106 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	local res = op1 | op2;
	$(Z) = (res == 0);
	tgt_saddrb = res;

	}

	:OR A", A" is A & op=0x61 ; op=97 {
		
	local op1 = A;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	
	:OR A, X is A & X & op=0x61 ; op=104 {
		
	local op1 = A;
	local op2 = X;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:OR A, C is A & C & op=0x61 ; op=106 {
		
	local op1 = A;
	local op2 = C;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:OR A, B is A & B & op=0x61 ; op=107 {
		
	local op1 = A;
	local op2 = B;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:OR A, E is A & E & op=0x61 ; op=108 {
		
	local op1 = A;
	local op2 = E;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:OR A, D is A & D & op=0x61 ; op=109 {
		
	local op1 = A;
	local op2 = D;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:OR A, L is A & L & op=0x61 ; op=110 {
		
	local op1 = A;
	local op2 = L;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:OR A, H is A & H & op=0x61 ; op=111 {
		
	local op1 = A;
	local op2 = H;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:OR X, A is X & A & op=0x61 ; op=96 {
		
	local op1 = X;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	X = res;

	}
	
	:OR C, A is C & A & op=0x61 ; op=98 {
		
	local op1 = C;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	C = res;

	}
	
	:OR B, A is B & A & op=0x61 ; op=99 {
		
	local op1 = B;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	B = res;

	}
	
	:OR E, A is E & A & op=0x61 ; op=100 {
		
	local op1 = E;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	E = res;

	}
	
	:OR D, A is D & A & op=0x61 ; op=101 {
		
	local op1 = D;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	D = res;

	}
	
	:OR L, A is L & A & op=0x61 ; op=102 {
		
	local op1 = L;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	L = res;

	}
	
	:OR H, A is H & A & op=0x61 ; op=103 {
		
	local op1 = H;
	local op2 = A;
	local res = op1 | op2;
	$(Z) = (res == 0);
	H = res;

	}
	

	:OR A, tgt_saddrb is A & op=107 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, !tgt_addr16b is A & op=111 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, [HL] is A & HL & op=109 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, [HL+byte] is A & HL & op=110 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, [HL+B] is A & HL & B & op=0x61 ; op=224 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, [HL+C] is A & HL & C & op=0x61 ; op=226 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, tgt_esaddr16b is A & op=0x11 ; op=111 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, ES:[HL] is A & ES & HL & op=0x11 ; op=109 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=110 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=224 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:OR A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=226 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 | op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, #byte is A & op=124 ; byte {
		
	local op1 = A;
	local op2 = byte;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR tgt_saddrb, #byte is op=122 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	tgt_saddrb = res;

	}

	:XOR A", A" is A & op=0x61 ; op=113 {
		
	local op1 = A;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	
	:XOR A, X is A & X & op=0x61 ; op=120 {
		
	local op1 = A;
	local op2 = X;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:XOR A, C is A & C & op=0x61 ; op=122 {
		
	local op1 = A;
	local op2 = C;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:XOR A, B is A & B & op=0x61 ; op=123 {
		
	local op1 = A;
	local op2 = B;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:XOR A, E is A & E & op=0x61 ; op=124 {
		
	local op1 = A;
	local op2 = E;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:XOR A, D is A & D & op=0x61 ; op=125 {
		
	local op1 = A;
	local op2 = D;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:XOR A, L is A & L & op=0x61 ; op=126 {
		
	local op1 = A;
	local op2 = L;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:XOR A, H is A & H & op=0x61 ; op=127 {
		
	local op1 = A;
	local op2 = H;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}
	
	:XOR X, A is X & A & op=0x61 ; op=112 {
		
	local op1 = X;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	X = res;

	}
	
	:XOR C, A is C & A & op=0x61 ; op=114 {
		
	local op1 = C;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	C = res;

	}
	
	:XOR B, A is B & A & op=0x61 ; op=115 {
		
	local op1 = B;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	B = res;

	}
	
	:XOR E, A is E & A & op=0x61 ; op=116 {
		
	local op1 = E;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	E = res;

	}
	
	:XOR D, A is D & A & op=0x61 ; op=117 {
		
	local op1 = D;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	D = res;

	}
	
	:XOR L, A is L & A & op=0x61 ; op=118 {
		
	local op1 = L;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	L = res;

	}
	
	:XOR H, A is H & A & op=0x61 ; op=119 {
		
	local op1 = H;
	local op2 = A;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	H = res;

	}
	

	:XOR A, tgt_saddrb is A & op=123 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, !tgt_addr16b is A & op=127 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, [HL] is A & HL & op=125 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, [HL+byte] is A & HL & op=126 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, [HL+B] is A & HL & B & op=0x61 ; op=240 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, [HL+C] is A & HL & C & op=0x61 ; op=242 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, tgt_esaddr16b is A & op=0x11 ; op=127 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, ES:[HL] is A & ES & HL & op=0x11 ; op=125 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=126 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=240 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:XOR A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=242 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	local res = op1 ^ op2;
	$(Z) = (res == 0);
	A = res;

	}

	:CMP A, #byte is A & op=76 ; byte {
		
	local op1 = A;
	local op2 = byte;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP tgt_saddrb, #byte is op=74 ; tgt_saddrb ; byte {
		
	local op1 = tgt_saddrb;
	local op2 = byte;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A", A" is A & op=0x61 ; op=65 {
		
	local op1 = A;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	
	:CMP A, X is A & X & op=0x61 ; op=72 {
		
	local op1 = A;
	local op2 = X;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP A, C is A & C & op=0x61 ; op=74 {
		
	local op1 = A;
	local op2 = C;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP A, B is A & B & op=0x61 ; op=75 {
		
	local op1 = A;
	local op2 = B;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP A, E is A & E & op=0x61 ; op=76 {
		
	local op1 = A;
	local op2 = E;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP A, D is A & D & op=0x61 ; op=77 {
		
	local op1 = A;
	local op2 = D;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP A, L is A & L & op=0x61 ; op=78 {
		
	local op1 = A;
	local op2 = L;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP A, H is A & H & op=0x61 ; op=79 {
		
	local op1 = A;
	local op2 = H;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP X, A is X & A & op=0x61 ; op=64 {
		
	local op1 = X;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP C, A is C & A & op=0x61 ; op=66 {
		
	local op1 = C;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP B, A is B & A & op=0x61 ; op=67 {
		
	local op1 = B;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP E, A is E & A & op=0x61 ; op=68 {
		
	local op1 = E;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP D, A is D & A & op=0x61 ; op=69 {
		
	local op1 = D;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP L, A is L & A & op=0x61 ; op=70 {
		
	local op1 = L;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	
	:CMP H, A is H & A & op=0x61 ; op=71 {
		
	local op1 = H;
	local op2 = A;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}
	

	:CMP A, tgt_saddrb is A & op=75 ; tgt_saddrb {
		
	local op1 = A;
	local op2 = tgt_saddrb;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, !tgt_addr16b is A & op=79 ; tgt_addr16b {
		
	local op1 = A;
	local op2 = tgt_addr16b;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, [HL] is A & HL & op=77 {
		local addr:4 = segment(0xF:2, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, [HL+byte] is A & HL & op=78 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, [HL+B] is A & HL & B & op=0x61 ; op=192 {
		local addr:4 = segment(0xF:2, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, [HL+C] is A & HL & C & op=0x61 ; op=194 {
		local addr:4 = segment(0xF:2, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, tgt_esaddr16b is A & op=0x11 ; op=79 ; tgt_esaddr16b {
		
	local op1 = A;
	local op2 = tgt_esaddr16b;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, ES:[HL] is A & ES & HL & op=0x11 ; op=77 {
		local addr:4 = segment(ES, HL);
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, ES:[HL+byte] is A & ES & HL & op=0x11 ; op=78 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, ES:[HL+B] is A & ES & HL & B & op=0x11 ; op=0x61 ; op=192 {
		local addr:4 = segment(ES, HL + zext(B));
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}

	:CMP A, ES:[HL+C] is A & ES & HL & C & op=0x11 ; op=0x61 ; op=194 {
		local addr:4 = segment(ES, HL + zext(C));
		
	local op1 = A;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

	}


:CMP !tgt_addr16b, #byte is op=0x40 ; tgt_addr16b ; byte {
	
	local op1 = tgt_addr16b;
	local op2 = byte;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

}

:CMP tgt_esaddr16b, #byte is op=0x11 ; op=0x40 ; tgt_esaddr16b ; byte {
	
	local op1 = tgt_esaddr16b;
	local op2 = byte;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 < op2);

}



:CMP0 A is op=0xD1 & A {
	
	local tmp = A;
	$(Z) = (tmp == 0);
	$(AC) = 0;
	$(CY) = 0;

}

:CMP0 X is op=0xD0 & X {
	
	local tmp = X;
	$(Z) = (tmp == 0);
	$(AC) = 0;
	$(CY) = 0;

}

:CMP0 B is op=0xD3 & B {
	
	local tmp = B;
	$(Z) = (tmp == 0);
	$(AC) = 0;
	$(CY) = 0;

}

:CMP0 C is op=0xD2 & C {
	
	local tmp = C;
	$(Z) = (tmp == 0);
	$(AC) = 0;
	$(CY) = 0;

}

:CMP0 tgt_saddrb is op=0xD4 ; tgt_saddrb {
	
	local tmp = tgt_saddrb;
	$(Z) = (tmp == 0);
	$(AC) = 0;
	$(CY) = 0;

}

:CMP0 !tgt_addr16b is op=0xD5 ; tgt_addr16b {
	
	local tmp = tgt_addr16b;
	$(Z) = (tmp == 0);
	$(AC) = 0;
	$(CY) = 0;

}

:CMP0 tgt_esaddr16b is op=0x11 ; op=0xD5 ; tgt_esaddr16b {
	
	local tmp = tgt_esaddr16b;
	$(Z) = (tmp == 0);
	$(AC) = 0;
	$(CY) = 0;

}



:CMPS X, [HL+byte] is X & HL & op=0x61 ; op=0xDE ; byte {
	local addr:4 = segment(0xF:2, HL + byte);
	
	local op1 = X;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 != op2) || (A == 0) || (op1 == 0);

}

:CMPS X, ES:[HL+byte] is X & ES & HL & op=0x11 ; op=0x61 ; op=0xDE ; byte {
	local addr:4 = segment(ES, HL + byte);
	
	local op1 = X;
	local op2 = *:1 addr;
	$(Z) = (op1 == op2);
	$(AC) = ((op1 & 0xf) < (op2 & 0xf));
	$(CY) = (op1 != op2) || (A == 0) || (op1 == 0);

}

#
# 16-bit operation
#








	:ADDW AX, #word is AX & op=4 ; word {
		
	local op1:2 = AX;
	local op2:2 = word;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, BC is AX & BC & op=3 {
		
	local op1:2 = AX;
	local op2:2 = BC;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, DE is AX & DE & op=5 {
		
	local op1:2 = AX;
	local op2:2 = DE;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, HL is AX & HL & op=7 {
		
	local op1:2 = AX;
	local op2:2 = HL;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, tgt_saddrw is AX & op=6 ; tgt_saddrw {
		
	local op1:2 = AX;
	local op2:2 = tgt_saddrw;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, !tgt_addr16w is AX & op=2 ; tgt_addr16w {
		
	local op1:2 = AX;
	local op2:2 = tgt_addr16w;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, [HL+byte] is AX & HL & op=0x61 ; op=9 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1:2 = AX;
	local op2:2 = *:2 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, tgt_esaddr16w is AX & op=0x11 ; op=2 ; tgt_esaddr16w {
		
	local op1:2 = AX;
	local op2:2 = tgt_esaddr16w;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:ADDW AX, ES:[HL+byte] is AX & ES & HL & op=0x11 ; op=0x61 ; op=9 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1:2 = AX;
	local op2:2 = *:2 addr;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

	}

	:SUBW AX, #word is AX & op=36 ; word {
		
	local op1:2 = AX;
	local op2:2 = word;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, BC is AX & BC & op=35 {
		
	local op1:2 = AX;
	local op2:2 = BC;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, DE is AX & DE & op=37 {
		
	local op1:2 = AX;
	local op2:2 = DE;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, HL is AX & HL & op=39 {
		
	local op1:2 = AX;
	local op2:2 = HL;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, tgt_saddrw is AX & op=38 ; tgt_saddrw {
		
	local op1:2 = AX;
	local op2:2 = tgt_saddrw;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, !tgt_addr16w is AX & op=34 ; tgt_addr16w {
		
	local op1:2 = AX;
	local op2:2 = tgt_addr16w;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, [HL+byte] is AX & HL & op=0x61 ; op=41 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1:2 = AX;
	local op2:2 = *:2 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, tgt_esaddr16w is AX & op=0x11 ; op=34 ; tgt_esaddr16w {
		
	local op1:2 = AX;
	local op2:2 = tgt_esaddr16w;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:SUBW AX, ES:[HL+byte] is AX & ES & HL & op=0x11 ; op=0x61 ; op=41 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1:2 = AX;
	local op2:2 = *:2 addr;
	local res = op1 - op2;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined
	AX = res;

	}

	:CMPW AX, #word is AX & op=68 ; word {
		
	local op1:2 = AX;
	local op2:2 = word;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, BC is AX & BC & op=67 {
		
	local op1:2 = AX;
	local op2:2 = BC;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, DE is AX & DE & op=69 {
		
	local op1:2 = AX;
	local op2:2 = DE;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, HL is AX & HL & op=71 {
		
	local op1:2 = AX;
	local op2:2 = HL;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, tgt_saddrw is AX & op=70 ; tgt_saddrw {
		
	local op1:2 = AX;
	local op2:2 = tgt_saddrw;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, !tgt_addr16w is AX & op=66 ; tgt_addr16w {
		
	local op1:2 = AX;
	local op2:2 = tgt_addr16w;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, [HL+byte] is AX & HL & op=0x61 ; op=73 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local op1:2 = AX;
	local op2:2 = *:2 addr;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, tgt_esaddr16w is AX & op=0x11 ; op=66 ; tgt_esaddr16w {
		
	local op1:2 = AX;
	local op2:2 = tgt_esaddr16w;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}

	:CMPW AX, ES:[HL+byte] is AX & ES & HL & op=0x11 ; op=0x61 ; op=73 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local op1:2 = AX;
	local op2:2 = *:2 addr;
	$(Z) = (op1 == op2);
	$(CY) = op1 < op2;
	# AC is undefined

	}


:ADDW AX", AX" is AX & op=0x01 {
	
	local op1:2 = AX;
	local op2:2 = AX;
	local res = op1 + op2;
	$(Z) = (res == 0);
	$(CY) = carry(op1, op2);
	# AC is undefined
	AX = res;

}

#
# Multiply
#

:MULU X is X & op=0xD6 {
	local op1:2 = zext(X);
	local op2:2 = zext(A);
	AX = op1 * op2;
}

# TODO: unimplemented: MULHU, MULH, DIVHU, DIVWU, MACHU, MACH

#
# Increment/decrement
#






	
	:INC X is op=128 & X {
		
	local tmp:1 = X;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	X = tmp;

	}
	
	:INC A is op=129 & A {
		
	local tmp:1 = A;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	A = tmp;

	}
	
	:INC C is op=130 & C {
		
	local tmp:1 = C;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	C = tmp;

	}
	
	:INC B is op=131 & B {
		
	local tmp:1 = B;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	B = tmp;

	}
	
	:INC E is op=132 & E {
		
	local tmp:1 = E;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	E = tmp;

	}
	
	:INC D is op=133 & D {
		
	local tmp:1 = D;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	D = tmp;

	}
	
	:INC L is op=134 & L {
		
	local tmp:1 = L;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	L = tmp;

	}
	
	:INC H is op=135 & H {
		
	local tmp:1 = H;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	H = tmp;

	}
	

	:INC tgt_saddrb is op=164 ; tgt_saddrb {
		
	local tmp:1 = tgt_saddrb;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	tgt_saddrb = tmp;

	}

	:INC tgt_addr16b is op=160 ; tgt_addr16b {
		
	local tmp:1 = tgt_addr16b;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	tgt_addr16b = tmp;

	}

	:INC [HL+byte] is HL & op=0x61 ; op=89 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local tmp:1 = *:1 addr;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	*:1 addr = tmp;

	}

	:INC tgt_esaddr16b is op=0x11 ; op=160 ; tgt_esaddr16b {
		
	local tmp:1 = tgt_esaddr16b;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	tgt_esaddr16b = tmp;

	}

	:INC ES:[HL+byte] is ES & HL & op=0x11 ; op=0x61 ; op=89 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local tmp:1 = *:1 addr;
	$(AC) = ((tmp & 0xF) == 0xF);
	tmp = tmp + 1;
	$(Z) = (tmp == 0);
	*:1 addr = tmp;

	}

	
	:DEC X is op=144 & X {
		
	local tmp = X;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	X = tmp;

	}
	
	:DEC A is op=145 & A {
		
	local tmp = A;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	A = tmp;

	}
	
	:DEC C is op=146 & C {
		
	local tmp = C;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	C = tmp;

	}
	
	:DEC B is op=147 & B {
		
	local tmp = B;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	B = tmp;

	}
	
	:DEC E is op=148 & E {
		
	local tmp = E;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	E = tmp;

	}
	
	:DEC D is op=149 & D {
		
	local tmp = D;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	D = tmp;

	}
	
	:DEC L is op=150 & L {
		
	local tmp = L;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	L = tmp;

	}
	
	:DEC H is op=151 & H {
		
	local tmp = H;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	H = tmp;

	}
	

	:DEC tgt_saddrb is op=180 ; tgt_saddrb {
		
	local tmp = tgt_saddrb;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	tgt_saddrb = tmp;

	}

	:DEC tgt_addr16b is op=176 ; tgt_addr16b {
		
	local tmp = tgt_addr16b;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	tgt_addr16b = tmp;

	}

	:DEC [HL+byte] is HL & op=0x61 ; op=105 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local tmp = *:1 addr;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	*:1 addr = tmp;

	}

	:DEC tgt_esaddr16b is op=0x11 ; op=176 ; tgt_esaddr16b {
		
	local tmp = tgt_esaddr16b;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	tgt_esaddr16b = tmp;

	}

	:DEC ES:[HL+byte] is ES & HL & op=0x11 ; op=0x61 ; op=105 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local tmp = *:1 addr;
	$(AC) = ((tmp & 0xF) == 0x0);
	tmp = tmp - 1;
	$(Z) = (tmp == 0);
	*:1 addr = tmp;

	}







	:INCW AX is AX & op=161 {
		
	local tmp:2 = AX;
	tmp = tmp + 1;
	AX = tmp;

	}
	:INCW BC is BC & op=163 {
		
	local tmp:2 = BC;
	tmp = tmp + 1;
	BC = tmp;

	}
	:INCW DE is DE & op=165 {
		
	local tmp:2 = DE;
	tmp = tmp + 1;
	DE = tmp;

	}
	:INCW HL is HL & op=167 {
		
	local tmp:2 = HL;
	tmp = tmp + 1;
	HL = tmp;

	}

	:INCW tgt_saddrw is op=166 ; tgt_saddrw {
		
	local tmp:2 = tgt_saddrw;
	tmp = tmp + 1;
	tgt_saddrw = tmp;

	}

	:INCW !tgt_addr16w is op=162 ; tgt_addr16w {
		
	local tmp:2 = tgt_addr16w;
	tmp = tmp + 1;
	tgt_addr16w = tmp;

	}

	:INCW [HL+byte] is HL & op=0x61 ; op=121 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local tmp:2 = *:2 addr;
	tmp = tmp + 1;
	*:2 addr = tmp;

	}

	:INCW tgt_esaddr16w is op=0x11 ; op=162 ; tgt_esaddr16w {
		
	local tmp:2 = tgt_esaddr16w;
	tmp = tmp + 1;
	tgt_esaddr16w = tmp;

	}

	:INCW ES:[HL+byte] is ES & HL & op=0x11 ; op=0x61 ; op=121 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local tmp:2 = *:2 addr;
	tmp = tmp + 1;
	*:2 addr = tmp;

	}

	:DECW AX is AX & op=177 {
		
	local tmp:2 = AX;
	tmp = tmp - 1;
	AX = tmp;

	}
	:DECW BC is BC & op=179 {
		
	local tmp:2 = BC;
	tmp = tmp - 1;
	BC = tmp;

	}
	:DECW DE is DE & op=181 {
		
	local tmp:2 = DE;
	tmp = tmp - 1;
	DE = tmp;

	}
	:DECW HL is HL & op=183 {
		
	local tmp:2 = HL;
	tmp = tmp - 1;
	HL = tmp;

	}

	:DECW tgt_saddrw is op=182 ; tgt_saddrw {
		
	local tmp:2 = tgt_saddrw;
	tmp = tmp - 1;
	tgt_saddrw = tmp;

	}

	:DECW !tgt_addr16w is op=178 ; tgt_addr16w {
		
	local tmp:2 = tgt_addr16w;
	tmp = tmp - 1;
	tgt_addr16w = tmp;

	}

	:DECW [HL+byte] is HL & op=0x61 ; op=137 ; byte {
		local addr:4 = segment(0xF:2, HL + byte);
		
	local tmp:2 = *:2 addr;
	tmp = tmp - 1;
	*:2 addr = tmp;

	}

	:DECW tgt_esaddr16w is op=0x11 ; op=178 ; tgt_esaddr16w {
		
	local tmp:2 = tgt_esaddr16w;
	tmp = tmp - 1;
	tgt_esaddr16w = tmp;

	}

	:DECW ES:[HL+byte] is ES & HL & op=0x11 ; op=0x61 ; op=137 ; byte {
		local addr:4 = segment(ES, HL + byte);
		
	local tmp:2 = *:2 addr;
	tmp = tmp - 1;
	*:2 addr = tmp;

	}


#
# Shift
#




:SHR A, 1 is A & op=0x31 ; op=26 {
	
	$(CY) = (A >> 0) & 1;
	A = A >> 1;

}

:SHR A, 2 is A & op=0x31 ; op=42 {
	
	$(CY) = (A >> 1) & 1;
	A = A >> 2;

}

:SHR A, 3 is A & op=0x31 ; op=58 {
	
	$(CY) = (A >> 2) & 1;
	A = A >> 3;

}

:SHR A, 4 is A & op=0x31 ; op=74 {
	
	$(CY) = (A >> 3) & 1;
	A = A >> 4;

}

:SHR A, 5 is A & op=0x31 ; op=90 {
	
	$(CY) = (A >> 4) & 1;
	A = A >> 5;

}

:SHR A, 6 is A & op=0x31 ; op=106 {
	
	$(CY) = (A >> 5) & 1;
	A = A >> 6;

}

:SHR A, 7 is A & op=0x31 ; op=122 {
	
	$(CY) = (A >> 6) & 1;
	A = A >> 7;

}





:SHRW AX, 1 is AX & op=0x31 ; op=30 {
	
	local tmp:2 = (AX >> 0);
	$(CY) = tmp[0,1];
	AX = AX >> 1;

}

:SHRW AX, 2 is AX & op=0x31 ; op=46 {
	
	local tmp:2 = (AX >> 1);
	$(CY) = tmp[0,1];
	AX = AX >> 2;

}

:SHRW AX, 3 is AX & op=0x31 ; op=62 {
	
	local tmp:2 = (AX >> 2);
	$(CY) = tmp[0,1];
	AX = AX >> 3;

}

:SHRW AX, 4 is AX & op=0x31 ; op=78 {
	
	local tmp:2 = (AX >> 3);
	$(CY) = tmp[0,1];
	AX = AX >> 4;

}

:SHRW AX, 5 is AX & op=0x31 ; op=94 {
	
	local tmp:2 = (AX >> 4);
	$(CY) = tmp[0,1];
	AX = AX >> 5;

}

:SHRW AX, 6 is AX & op=0x31 ; op=110 {
	
	local tmp:2 = (AX >> 5);
	$(CY) = tmp[0,1];
	AX = AX >> 6;

}

:SHRW AX, 7 is AX & op=0x31 ; op=126 {
	
	local tmp:2 = (AX >> 6);
	$(CY) = tmp[0,1];
	AX = AX >> 7;

}

:SHRW AX, 8 is AX & op=0x31 ; op=142 {
	
	local tmp:2 = (AX >> 7);
	$(CY) = tmp[0,1];
	AX = AX >> 8;

}

:SHRW AX, 9 is AX & op=0x31 ; op=158 {
	
	local tmp:2 = (AX >> 8);
	$(CY) = tmp[0,1];
	AX = AX >> 9;

}

:SHRW AX, 10 is AX & op=0x31 ; op=174 {
	
	local tmp:2 = (AX >> 9);
	$(CY) = tmp[0,1];
	AX = AX >> 10;

}

:SHRW AX, 11 is AX & op=0x31 ; op=190 {
	
	local tmp:2 = (AX >> 10);
	$(CY) = tmp[0,1];
	AX = AX >> 11;

}

:SHRW AX, 12 is AX & op=0x31 ; op=206 {
	
	local tmp:2 = (AX >> 11);
	$(CY) = tmp[0,1];
	AX = AX >> 12;

}

:SHRW AX, 13 is AX & op=0x31 ; op=222 {
	
	local tmp:2 = (AX >> 12);
	$(CY) = tmp[0,1];
	AX = AX >> 13;

}

:SHRW AX, 14 is AX & op=0x31 ; op=238 {
	
	local tmp:2 = (AX >> 13);
	$(CY) = tmp[0,1];
	AX = AX >> 14;

}

:SHRW AX, 15 is AX & op=0x31 ; op=254 {
	
	local tmp:2 = (AX >> 14);
	$(CY) = tmp[0,1];
	AX = AX >> 15;

}






	:SHL A, 1 is A & op=0x31 ; op=25 {
		
	local tmp = A;
	$(CY) = (tmp >> 7) & 1;
	tmp = tmp << 1;
	A = tmp;

	}

	:SHL A, 2 is A & op=0x31 ; op=41 {
		
	local tmp = A;
	$(CY) = (tmp >> 6) & 1;
	tmp = tmp << 2;
	A = tmp;

	}

	:SHL A, 3 is A & op=0x31 ; op=57 {
		
	local tmp = A;
	$(CY) = (tmp >> 5) & 1;
	tmp = tmp << 3;
	A = tmp;

	}

	:SHL A, 4 is A & op=0x31 ; op=73 {
		
	local tmp = A;
	$(CY) = (tmp >> 4) & 1;
	tmp = tmp << 4;
	A = tmp;

	}

	:SHL A, 5 is A & op=0x31 ; op=89 {
		
	local tmp = A;
	$(CY) = (tmp >> 3) & 1;
	tmp = tmp << 5;
	A = tmp;

	}

	:SHL A, 6 is A & op=0x31 ; op=105 {
		
	local tmp = A;
	$(CY) = (tmp >> 2) & 1;
	tmp = tmp << 6;
	A = tmp;

	}

	:SHL A, 7 is A & op=0x31 ; op=121 {
		
	local tmp = A;
	$(CY) = (tmp >> 1) & 1;
	tmp = tmp << 7;
	A = tmp;

	}



	:SHL B, 1 is B & op=0x31 ; op=24 {
		
	local tmp = B;
	$(CY) = (tmp >> 7) & 1;
	tmp = tmp << 1;
	B = tmp;

	}

	:SHL B, 2 is B & op=0x31 ; op=40 {
		
	local tmp = B;
	$(CY) = (tmp >> 6) & 1;
	tmp = tmp << 2;
	B = tmp;

	}

	:SHL B, 3 is B & op=0x31 ; op=56 {
		
	local tmp = B;
	$(CY) = (tmp >> 5) & 1;
	tmp = tmp << 3;
	B = tmp;

	}

	:SHL B, 4 is B & op=0x31 ; op=72 {
		
	local tmp = B;
	$(CY) = (tmp >> 4) & 1;
	tmp = tmp << 4;
	B = tmp;

	}

	:SHL B, 5 is B & op=0x31 ; op=88 {
		
	local tmp = B;
	$(CY) = (tmp >> 3) & 1;
	tmp = tmp << 5;
	B = tmp;

	}

	:SHL B, 6 is B & op=0x31 ; op=104 {
		
	local tmp = B;
	$(CY) = (tmp >> 2) & 1;
	tmp = tmp << 6;
	B = tmp;

	}

	:SHL B, 7 is B & op=0x31 ; op=120 {
		
	local tmp = B;
	$(CY) = (tmp >> 1) & 1;
	tmp = tmp << 7;
	B = tmp;

	}



	:SHL C, 1 is C & op=0x31 ; op=23 {
		
	local tmp = C;
	$(CY) = (tmp >> 7) & 1;
	tmp = tmp << 1;
	C = tmp;

	}

	:SHL C, 2 is C & op=0x31 ; op=39 {
		
	local tmp = C;
	$(CY) = (tmp >> 6) & 1;
	tmp = tmp << 2;
	C = tmp;

	}

	:SHL C, 3 is C & op=0x31 ; op=55 {
		
	local tmp = C;
	$(CY) = (tmp >> 5) & 1;
	tmp = tmp << 3;
	C = tmp;

	}

	:SHL C, 4 is C & op=0x31 ; op=71 {
		
	local tmp = C;
	$(CY) = (tmp >> 4) & 1;
	tmp = tmp << 4;
	C = tmp;

	}

	:SHL C, 5 is C & op=0x31 ; op=87 {
		
	local tmp = C;
	$(CY) = (tmp >> 3) & 1;
	tmp = tmp << 5;
	C = tmp;

	}

	:SHL C, 6 is C & op=0x31 ; op=103 {
		
	local tmp = C;
	$(CY) = (tmp >> 2) & 1;
	tmp = tmp << 6;
	C = tmp;

	}

	:SHL C, 7 is C & op=0x31 ; op=119 {
		
	local tmp = C;
	$(CY) = (tmp >> 1) & 1;
	tmp = tmp << 7;
	C = tmp;

	}







	:SHLW AX, 1 is AX & op=0x31 ; op=29 {
		
	$(CY) = AX[15,1];
	AX = AX << 1;

	}

	:SHLW AX, 2 is AX & op=0x31 ; op=45 {
		
	$(CY) = AX[14,1];
	AX = AX << 2;

	}

	:SHLW AX, 3 is AX & op=0x31 ; op=61 {
		
	$(CY) = AX[13,1];
	AX = AX << 3;

	}

	:SHLW AX, 4 is AX & op=0x31 ; op=77 {
		
	$(CY) = AX[12,1];
	AX = AX << 4;

	}

	:SHLW AX, 5 is AX & op=0x31 ; op=93 {
		
	$(CY) = AX[11,1];
	AX = AX << 5;

	}

	:SHLW AX, 6 is AX & op=0x31 ; op=109 {
		
	$(CY) = AX[10,1];
	AX = AX << 6;

	}

	:SHLW AX, 7 is AX & op=0x31 ; op=125 {
		
	$(CY) = AX[9,1];
	AX = AX << 7;

	}

	:SHLW AX, 8 is AX & op=0x31 ; op=141 {
		
	$(CY) = AX[8,1];
	AX = AX << 8;

	}

	:SHLW AX, 9 is AX & op=0x31 ; op=157 {
		
	$(CY) = AX[7,1];
	AX = AX << 9;

	}

	:SHLW AX, 10 is AX & op=0x31 ; op=173 {
		
	$(CY) = AX[6,1];
	AX = AX << 10;

	}

	:SHLW AX, 11 is AX & op=0x31 ; op=189 {
		
	$(CY) = AX[5,1];
	AX = AX << 11;

	}

	:SHLW AX, 12 is AX & op=0x31 ; op=205 {
		
	$(CY) = AX[4,1];
	AX = AX << 12;

	}

	:SHLW AX, 13 is AX & op=0x31 ; op=221 {
		
	$(CY) = AX[3,1];
	AX = AX << 13;

	}

	:SHLW AX, 14 is AX & op=0x31 ; op=237 {
		
	$(CY) = AX[2,1];
	AX = AX << 14;

	}

	:SHLW AX, 15 is AX & op=0x31 ; op=253 {
		
	$(CY) = AX[1,1];
	AX = AX << 15;

	}



	:SHLW BC, 1 is BC & op=0x31 ; op=28 {
		
	$(CY) = BC[15,1];
	BC = BC << 1;

	}

	:SHLW BC, 2 is BC & op=0x31 ; op=44 {
		
	$(CY) = BC[14,1];
	BC = BC << 2;

	}

	:SHLW BC, 3 is BC & op=0x31 ; op=60 {
		
	$(CY) = BC[13,1];
	BC = BC << 3;

	}

	:SHLW BC, 4 is BC & op=0x31 ; op=76 {
		
	$(CY) = BC[12,1];
	BC = BC << 4;

	}

	:SHLW BC, 5 is BC & op=0x31 ; op=92 {
		
	$(CY) = BC[11,1];
	BC = BC << 5;

	}

	:SHLW BC, 6 is BC & op=0x31 ; op=108 {
		
	$(CY) = BC[10,1];
	BC = BC << 6;

	}

	:SHLW BC, 7 is BC & op=0x31 ; op=124 {
		
	$(CY) = BC[9,1];
	BC = BC << 7;

	}

	:SHLW BC, 8 is BC & op=0x31 ; op=140 {
		
	$(CY) = BC[8,1];
	BC = BC << 8;

	}

	:SHLW BC, 9 is BC & op=0x31 ; op=156 {
		
	$(CY) = BC[7,1];
	BC = BC << 9;

	}

	:SHLW BC, 10 is BC & op=0x31 ; op=172 {
		
	$(CY) = BC[6,1];
	BC = BC << 10;

	}

	:SHLW BC, 11 is BC & op=0x31 ; op=188 {
		
	$(CY) = BC[5,1];
	BC = BC << 11;

	}

	:SHLW BC, 12 is BC & op=0x31 ; op=204 {
		
	$(CY) = BC[4,1];
	BC = BC << 12;

	}

	:SHLW BC, 13 is BC & op=0x31 ; op=220 {
		
	$(CY) = BC[3,1];
	BC = BC << 13;

	}

	:SHLW BC, 14 is BC & op=0x31 ; op=236 {
		
	$(CY) = BC[2,1];
	BC = BC << 14;

	}

	:SHLW BC, 15 is BC & op=0x31 ; op=252 {
		
	$(CY) = BC[1,1];
	BC = BC << 15;

	}






	:SAR A, 1 is A & op=0x31 ; op=27 {
		
	$(CY) = A[0,1];
	A = A s>> 1;

	}

	:SAR A, 2 is A & op=0x31 ; op=43 {
		
	$(CY) = A[1,1];
	A = A s>> 2;

	}

	:SAR A, 3 is A & op=0x31 ; op=59 {
		
	$(CY) = A[2,1];
	A = A s>> 3;

	}

	:SAR A, 4 is A & op=0x31 ; op=75 {
		
	$(CY) = A[3,1];
	A = A s>> 4;

	}

	:SAR A, 5 is A & op=0x31 ; op=91 {
		
	$(CY) = A[4,1];
	A = A s>> 5;

	}

	:SAR A, 6 is A & op=0x31 ; op=107 {
		
	$(CY) = A[5,1];
	A = A s>> 6;

	}

	:SAR A, 7 is A & op=0x31 ; op=123 {
		
	$(CY) = A[6,1];
	A = A s>> 7;

	}





	:SARW AX, 1 is AX & op=0x31 ; op=31 {
		
	$(CY) = AX[0,1];
	AX = AX s>> 1;

	}

	:SARW AX, 2 is AX & op=0x31 ; op=47 {
		
	$(CY) = AX[1,1];
	AX = AX s>> 2;

	}

	:SARW AX, 3 is AX & op=0x31 ; op=63 {
		
	$(CY) = AX[2,1];
	AX = AX s>> 3;

	}

	:SARW AX, 4 is AX & op=0x31 ; op=79 {
		
	$(CY) = AX[3,1];
	AX = AX s>> 4;

	}

	:SARW AX, 5 is AX & op=0x31 ; op=95 {
		
	$(CY) = AX[4,1];
	AX = AX s>> 5;

	}

	:SARW AX, 6 is AX & op=0x31 ; op=111 {
		
	$(CY) = AX[5,1];
	AX = AX s>> 6;

	}

	:SARW AX, 7 is AX & op=0x31 ; op=127 {
		
	$(CY) = AX[6,1];
	AX = AX s>> 7;

	}

	:SARW AX, 8 is AX & op=0x31 ; op=143 {
		
	$(CY) = AX[7,1];
	AX = AX s>> 8;

	}

	:SARW AX, 9 is AX & op=0x31 ; op=159 {
		
	$(CY) = AX[8,1];
	AX = AX s>> 9;

	}

	:SARW AX, 10 is AX & op=0x31 ; op=175 {
		
	$(CY) = AX[9,1];
	AX = AX s>> 10;

	}

	:SARW AX, 11 is AX & op=0x31 ; op=191 {
		
	$(CY) = AX[10,1];
	AX = AX s>> 11;

	}

	:SARW AX, 12 is AX & op=0x31 ; op=207 {
		
	$(CY) = AX[11,1];
	AX = AX s>> 12;

	}

	:SARW AX, 13 is AX & op=0x31 ; op=223 {
		
	$(CY) = AX[12,1];
	AX = AX s>> 13;

	}

	:SARW AX, 14 is AX & op=0x31 ; op=239 {
		
	$(CY) = AX[13,1];
	AX = AX s>> 14;

	}

	:SARW AX, 15 is AX & op=0x31 ; op=255 {
		
	$(CY) = AX[14,1];
	AX = AX s>> 15;

	}


#
# Rotate
#

:ROR A, 1 is A & op=0x61 ; op=0xDB {
	local cy = A & 1;
	A = (A >> 1) | (cy << 7);
	$(CY) = cy;
}

:ROL A, 1 is A & op=0x61 ; op=0xEB {
	local cy = A >> 7;
	A = (A << 1) | cy;
	$(CY) = cy;
}

:RORC A, 1 is A & op=0x61 ; op=0xFB {
	local cy = A & 1;
	A = (A >> 1) | ($(CY) << 7);
	$(CY) = cy;
}

:ROLC A, 1 is A & op=0x61 ; op=0xDC {
	local cy = A >> 7;
	A = (A << 1) | $(CY);
	$(CY) = cy;
}

:ROLWC AX, 1 is AX & op=0x61 ; op=0xEE {
	local cy = AX >> 15;
	AX = (AX << 1) | zext($(CY));
	$(CY) = cy[0,1];
}

:ROLWC BC, 1 is BC & op=0x61 ; op=0xFE {
	local cy = BC >> 15;
	BC = (BC << 1) | zext($(CY));
	$(CY) = cy[0,1];
}

#
# Bit manipulate
#






:MOV1 "CY", tgt_saddrb".0" is op=0x71 ; op=4 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 0) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".0" is op=0x71 ; op=12 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 0) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".0" is A & op=0x71 ; op=140 {
	
	local src = A;
	src = (src >> 0) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".0" is PSW & op=0x71 ; op=12 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 0) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".0" is HL & op=0x71 ; op=132 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 0) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".0", "CY" is op=0x71 ; op=1 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 0;
	dst = dst & ~(1 << 0);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".0", "CY" is op=0x71 ; op=9 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 0;
	dst = dst & ~(1 << 0);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".0", "CY" is A & op=0x71 ; op=137 {
	
	local src = $(CY);
	local dst = A;
	src = src << 0;
	dst = dst & ~(1 << 0);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".0", "CY" is PSW & op=0x71 ; op=9 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 0;
	dst = dst & ~(1 << 0);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".0", "CY" is HL & op=0x71 ; op=129 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 0;
	dst = dst & ~(1 << 0);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".0" is ES & HL & op=0x11 ; op=0x71 ; op=132 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 0) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".0", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=129 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 0;
	dst = dst & ~(1 << 0);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", tgt_saddrb".1" is op=0x71 ; op=20 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 1) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".1" is op=0x71 ; op=28 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 1) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".1" is A & op=0x71 ; op=156 {
	
	local src = A;
	src = (src >> 1) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".1" is PSW & op=0x71 ; op=28 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 1) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".1" is HL & op=0x71 ; op=148 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 1) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".1", "CY" is op=0x71 ; op=17 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 1;
	dst = dst & ~(1 << 1);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".1", "CY" is op=0x71 ; op=25 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 1;
	dst = dst & ~(1 << 1);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".1", "CY" is A & op=0x71 ; op=153 {
	
	local src = $(CY);
	local dst = A;
	src = src << 1;
	dst = dst & ~(1 << 1);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".1", "CY" is PSW & op=0x71 ; op=25 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 1;
	dst = dst & ~(1 << 1);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".1", "CY" is HL & op=0x71 ; op=145 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 1;
	dst = dst & ~(1 << 1);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".1" is ES & HL & op=0x11 ; op=0x71 ; op=148 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 1) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".1", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=145 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 1;
	dst = dst & ~(1 << 1);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", tgt_saddrb".2" is op=0x71 ; op=36 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 2) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".2" is op=0x71 ; op=44 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 2) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".2" is A & op=0x71 ; op=172 {
	
	local src = A;
	src = (src >> 2) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".2" is PSW & op=0x71 ; op=44 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 2) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".2" is HL & op=0x71 ; op=164 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 2) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".2", "CY" is op=0x71 ; op=33 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 2;
	dst = dst & ~(1 << 2);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".2", "CY" is op=0x71 ; op=41 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 2;
	dst = dst & ~(1 << 2);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".2", "CY" is A & op=0x71 ; op=169 {
	
	local src = $(CY);
	local dst = A;
	src = src << 2;
	dst = dst & ~(1 << 2);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".2", "CY" is PSW & op=0x71 ; op=41 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 2;
	dst = dst & ~(1 << 2);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".2", "CY" is HL & op=0x71 ; op=161 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 2;
	dst = dst & ~(1 << 2);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".2" is ES & HL & op=0x11 ; op=0x71 ; op=164 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 2) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".2", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=161 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 2;
	dst = dst & ~(1 << 2);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", tgt_saddrb".3" is op=0x71 ; op=52 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 3) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".3" is op=0x71 ; op=60 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 3) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".3" is A & op=0x71 ; op=188 {
	
	local src = A;
	src = (src >> 3) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".3" is PSW & op=0x71 ; op=60 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 3) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".3" is HL & op=0x71 ; op=180 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 3) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".3", "CY" is op=0x71 ; op=49 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 3;
	dst = dst & ~(1 << 3);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".3", "CY" is op=0x71 ; op=57 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 3;
	dst = dst & ~(1 << 3);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".3", "CY" is A & op=0x71 ; op=185 {
	
	local src = $(CY);
	local dst = A;
	src = src << 3;
	dst = dst & ~(1 << 3);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".3", "CY" is PSW & op=0x71 ; op=57 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 3;
	dst = dst & ~(1 << 3);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".3", "CY" is HL & op=0x71 ; op=177 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 3;
	dst = dst & ~(1 << 3);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".3" is ES & HL & op=0x11 ; op=0x71 ; op=180 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 3) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".3", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=177 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 3;
	dst = dst & ~(1 << 3);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", tgt_saddrb".4" is op=0x71 ; op=68 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 4) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".4" is op=0x71 ; op=76 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 4) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".4" is A & op=0x71 ; op=204 {
	
	local src = A;
	src = (src >> 4) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".4" is PSW & op=0x71 ; op=76 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 4) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".4" is HL & op=0x71 ; op=196 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 4) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".4", "CY" is op=0x71 ; op=65 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 4;
	dst = dst & ~(1 << 4);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".4", "CY" is op=0x71 ; op=73 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 4;
	dst = dst & ~(1 << 4);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".4", "CY" is A & op=0x71 ; op=201 {
	
	local src = $(CY);
	local dst = A;
	src = src << 4;
	dst = dst & ~(1 << 4);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".4", "CY" is PSW & op=0x71 ; op=73 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 4;
	dst = dst & ~(1 << 4);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".4", "CY" is HL & op=0x71 ; op=193 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 4;
	dst = dst & ~(1 << 4);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".4" is ES & HL & op=0x11 ; op=0x71 ; op=196 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 4) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".4", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=193 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 4;
	dst = dst & ~(1 << 4);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", tgt_saddrb".5" is op=0x71 ; op=84 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 5) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".5" is op=0x71 ; op=92 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 5) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".5" is A & op=0x71 ; op=220 {
	
	local src = A;
	src = (src >> 5) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".5" is PSW & op=0x71 ; op=92 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 5) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".5" is HL & op=0x71 ; op=212 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 5) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".5", "CY" is op=0x71 ; op=81 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 5;
	dst = dst & ~(1 << 5);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".5", "CY" is op=0x71 ; op=89 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 5;
	dst = dst & ~(1 << 5);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".5", "CY" is A & op=0x71 ; op=217 {
	
	local src = $(CY);
	local dst = A;
	src = src << 5;
	dst = dst & ~(1 << 5);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".5", "CY" is PSW & op=0x71 ; op=89 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 5;
	dst = dst & ~(1 << 5);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".5", "CY" is HL & op=0x71 ; op=209 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 5;
	dst = dst & ~(1 << 5);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".5" is ES & HL & op=0x11 ; op=0x71 ; op=212 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 5) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".5", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=209 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 5;
	dst = dst & ~(1 << 5);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", tgt_saddrb".6" is op=0x71 ; op=100 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 6) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".6" is op=0x71 ; op=108 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 6) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".6" is A & op=0x71 ; op=236 {
	
	local src = A;
	src = (src >> 6) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".6" is PSW & op=0x71 ; op=108 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 6) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".6" is HL & op=0x71 ; op=228 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 6) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".6", "CY" is op=0x71 ; op=97 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 6;
	dst = dst & ~(1 << 6);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".6", "CY" is op=0x71 ; op=105 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 6;
	dst = dst & ~(1 << 6);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".6", "CY" is A & op=0x71 ; op=233 {
	
	local src = $(CY);
	local dst = A;
	src = src << 6;
	dst = dst & ~(1 << 6);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".6", "CY" is PSW & op=0x71 ; op=105 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 6;
	dst = dst & ~(1 << 6);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".6", "CY" is HL & op=0x71 ; op=225 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 6;
	dst = dst & ~(1 << 6);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".6" is ES & HL & op=0x11 ; op=0x71 ; op=228 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 6) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".6", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=225 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 6;
	dst = dst & ~(1 << 6);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", tgt_saddrb".7" is op=0x71 ; op=116 ; tgt_saddrb {
	
	local src = tgt_saddrb;
	src = (src >> 7) & 1;
	$(CY) = src;

}

:MOV1 "CY", tgt_sfrb".7" is op=0x71 ; op=124 ; tgt_sfrb {
	
	local src = tgt_sfrb;
	src = (src >> 7) & 1;
	$(CY) = src;

}

:MOV1 "CY", A".7" is A & op=0x71 ; op=252 {
	
	local src = A;
	src = (src >> 7) & 1;
	$(CY) = src;

}

:MOV1 "CY", PSW".7" is PSW & op=0x71 ; op=124 ; op=0xFA {
	
	local src = PSW;
	src = (src >> 7) & 1;
	$(CY) = src;

}

:MOV1 "CY", [HL]".7" is HL & op=0x71 ; op=244 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = *:1 addr;
	src = (src >> 7) & 1;
	$(CY) = src;

}

:MOV1 tgt_saddrb".7", "CY" is op=0x71 ; op=113 ; tgt_saddrb {
	
	local src = $(CY);
	local dst = tgt_saddrb;
	src = src << 7;
	dst = dst & ~(1 << 7);
	dst = dst | src;
	tgt_saddrb = dst;

}

:MOV1 tgt_sfrb".7", "CY" is op=0x71 ; op=121 ; tgt_sfrb {
	
	local src = $(CY);
	local dst = tgt_sfrb;
	src = src << 7;
	dst = dst & ~(1 << 7);
	dst = dst | src;
	tgt_sfrb = dst;

}

:MOV1 A".7", "CY" is A & op=0x71 ; op=249 {
	
	local src = $(CY);
	local dst = A;
	src = src << 7;
	dst = dst & ~(1 << 7);
	dst = dst | src;
	A = dst;

}

:MOV1 PSW".7", "CY" is PSW & op=0x71 ; op=121 ; op=0xFA {
	
	local src = $(CY);
	local dst = PSW;
	src = src << 7;
	dst = dst & ~(1 << 7);
	dst = dst | src;
	PSW = dst;

}

:MOV1 [HL]".7", "CY" is HL & op=0x71 ; op=241 {
	local addr:4 = segment(0xF:2, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 7;
	dst = dst & ~(1 << 7);
	dst = dst | src;
	*:1 addr = dst;

}

:MOV1 "CY", ES:[HL]".7" is ES & HL & op=0x11 ; op=0x71 ; op=244 {
	local addr:4 = segment(ES, HL);
	
	local src = *:1 addr;
	src = (src >> 7) & 1;
	$(CY) = src;

}

:MOV1 ES:[HL]".7", "CY" is ES & HL & op=0x11 ; op=0x71 ; op=241 {
	local addr:4 = segment(ES, HL);
	
	local src = $(CY);
	local dst = *:1 addr;
	src = src << 7;
	dst = dst & ~(1 << 7);
	dst = dst | src;
	*:1 addr = dst;

}













	
		:AND1 "CY", tgt_saddrb".0" is op=0x71 ; op=5 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_saddrb".1" is op=0x71 ; op=21 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_saddrb".2" is op=0x71 ; op=37 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_saddrb".3" is op=0x71 ; op=53 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_saddrb".4" is op=0x71 ; op=69 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_saddrb".5" is op=0x71 ; op=85 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_saddrb".6" is op=0x71 ; op=101 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_saddrb".7" is op=0x71 ; op=117 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	

	
		:AND1 "CY", tgt_sfrb".0" is op=0x71 ; op=13 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_sfrb".1" is op=0x71 ; op=29 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_sfrb".2" is op=0x71 ; op=45 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_sfrb".3" is op=0x71 ; op=61 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_sfrb".4" is op=0x71 ; op=77 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_sfrb".5" is op=0x71 ; op=93 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_sfrb".6" is op=0x71 ; op=109 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", tgt_sfrb".7" is op=0x71 ; op=125 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	

	
		:AND1 "CY", A".0" is A & op=0x71 ; op=141 {
			
	local tmp:1 = A;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", A".1" is A & op=0x71 ; op=157 {
			
	local tmp:1 = A;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", A".2" is A & op=0x71 ; op=173 {
			
	local tmp:1 = A;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", A".3" is A & op=0x71 ; op=189 {
			
	local tmp:1 = A;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", A".4" is A & op=0x71 ; op=205 {
			
	local tmp:1 = A;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", A".5" is A & op=0x71 ; op=221 {
			
	local tmp:1 = A;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", A".6" is A & op=0x71 ; op=237 {
			
	local tmp:1 = A;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", A".7" is A & op=0x71 ; op=253 {
			
	local tmp:1 = A;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	

	
		:AND1 "CY", PSW".0" is PSW & op=0x71 ; op=13 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", PSW".1" is PSW & op=0x71 ; op=29 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", PSW".2" is PSW & op=0x71 ; op=45 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", PSW".3" is PSW & op=0x71 ; op=61 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", PSW".4" is PSW & op=0x71 ; op=77 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", PSW".5" is PSW & op=0x71 ; op=93 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", PSW".6" is PSW & op=0x71 ; op=109 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", PSW".7" is PSW & op=0x71 ; op=125 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	

	
		:AND1 "CY", [HL]".0" is HL & op=0x71 ; op=133 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", [HL]".1" is HL & op=0x71 ; op=149 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", [HL]".2" is HL & op=0x71 ; op=165 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", [HL]".3" is HL & op=0x71 ; op=181 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", [HL]".4" is HL & op=0x71 ; op=197 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", [HL]".5" is HL & op=0x71 ; op=213 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", [HL]".6" is HL & op=0x71 ; op=229 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", [HL]".7" is HL & op=0x71 ; op=245 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	

	
		:AND1 "CY", ES:[HL]".0" is ES & HL & op=0x11 ; op=0x71 ; op=133 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", ES:[HL]".1" is ES & HL & op=0x11 ; op=0x71 ; op=149 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", ES:[HL]".2" is ES & HL & op=0x11 ; op=0x71 ; op=165 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", ES:[HL]".3" is ES & HL & op=0x11 ; op=0x71 ; op=181 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", ES:[HL]".4" is ES & HL & op=0x11 ; op=0x71 ; op=197 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", ES:[HL]".5" is ES & HL & op=0x11 ; op=0x71 ; op=213 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", ES:[HL]".6" is ES & HL & op=0x11 ; op=0x71 ; op=229 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	
		:AND1 "CY", ES:[HL]".7" is ES & HL & op=0x11 ; op=0x71 ; op=245 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy & tmp;
	$(CY) = cy;

		}
	

	
		:OR1 "CY", tgt_saddrb".0" is op=0x71 ; op=6 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_saddrb".1" is op=0x71 ; op=22 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_saddrb".2" is op=0x71 ; op=38 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_saddrb".3" is op=0x71 ; op=54 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_saddrb".4" is op=0x71 ; op=70 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_saddrb".5" is op=0x71 ; op=86 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_saddrb".6" is op=0x71 ; op=102 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_saddrb".7" is op=0x71 ; op=118 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	

	
		:OR1 "CY", tgt_sfrb".0" is op=0x71 ; op=14 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_sfrb".1" is op=0x71 ; op=30 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_sfrb".2" is op=0x71 ; op=46 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_sfrb".3" is op=0x71 ; op=62 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_sfrb".4" is op=0x71 ; op=78 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_sfrb".5" is op=0x71 ; op=94 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_sfrb".6" is op=0x71 ; op=110 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", tgt_sfrb".7" is op=0x71 ; op=126 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	

	
		:OR1 "CY", A".0" is A & op=0x71 ; op=142 {
			
	local tmp:1 = A;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", A".1" is A & op=0x71 ; op=158 {
			
	local tmp:1 = A;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", A".2" is A & op=0x71 ; op=174 {
			
	local tmp:1 = A;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", A".3" is A & op=0x71 ; op=190 {
			
	local tmp:1 = A;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", A".4" is A & op=0x71 ; op=206 {
			
	local tmp:1 = A;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", A".5" is A & op=0x71 ; op=222 {
			
	local tmp:1 = A;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", A".6" is A & op=0x71 ; op=238 {
			
	local tmp:1 = A;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", A".7" is A & op=0x71 ; op=254 {
			
	local tmp:1 = A;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	

	
		:OR1 "CY", PSW".0" is PSW & op=0x71 ; op=14 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", PSW".1" is PSW & op=0x71 ; op=30 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", PSW".2" is PSW & op=0x71 ; op=46 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", PSW".3" is PSW & op=0x71 ; op=62 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", PSW".4" is PSW & op=0x71 ; op=78 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", PSW".5" is PSW & op=0x71 ; op=94 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", PSW".6" is PSW & op=0x71 ; op=110 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", PSW".7" is PSW & op=0x71 ; op=126 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	

	
		:OR1 "CY", [HL]".0" is HL & op=0x71 ; op=134 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", [HL]".1" is HL & op=0x71 ; op=150 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", [HL]".2" is HL & op=0x71 ; op=166 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", [HL]".3" is HL & op=0x71 ; op=182 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", [HL]".4" is HL & op=0x71 ; op=198 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", [HL]".5" is HL & op=0x71 ; op=214 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", [HL]".6" is HL & op=0x71 ; op=230 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", [HL]".7" is HL & op=0x71 ; op=246 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	

	
		:OR1 "CY", ES:[HL]".0" is ES & HL & op=0x11 ; op=0x71 ; op=134 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", ES:[HL]".1" is ES & HL & op=0x11 ; op=0x71 ; op=150 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", ES:[HL]".2" is ES & HL & op=0x11 ; op=0x71 ; op=166 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", ES:[HL]".3" is ES & HL & op=0x11 ; op=0x71 ; op=182 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", ES:[HL]".4" is ES & HL & op=0x11 ; op=0x71 ; op=198 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", ES:[HL]".5" is ES & HL & op=0x11 ; op=0x71 ; op=214 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", ES:[HL]".6" is ES & HL & op=0x11 ; op=0x71 ; op=230 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	
		:OR1 "CY", ES:[HL]".7" is ES & HL & op=0x11 ; op=0x71 ; op=246 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy | tmp;
	$(CY) = cy;

		}
	

	
		:XOR1 "CY", tgt_saddrb".0" is op=0x71 ; op=7 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_saddrb".1" is op=0x71 ; op=23 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_saddrb".2" is op=0x71 ; op=39 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_saddrb".3" is op=0x71 ; op=55 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_saddrb".4" is op=0x71 ; op=71 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_saddrb".5" is op=0x71 ; op=87 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_saddrb".6" is op=0x71 ; op=103 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_saddrb".7" is op=0x71 ; op=119 ; tgt_saddrb {
			
	local tmp:1 = tgt_saddrb;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	

	
		:XOR1 "CY", tgt_sfrb".0" is op=0x71 ; op=15 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_sfrb".1" is op=0x71 ; op=31 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_sfrb".2" is op=0x71 ; op=47 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_sfrb".3" is op=0x71 ; op=63 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_sfrb".4" is op=0x71 ; op=79 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_sfrb".5" is op=0x71 ; op=95 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_sfrb".6" is op=0x71 ; op=111 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", tgt_sfrb".7" is op=0x71 ; op=127 ; tgt_sfrb {
			
	local tmp:1 = tgt_sfrb;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	

	
		:XOR1 "CY", A".0" is A & op=0x71 ; op=143 {
			
	local tmp:1 = A;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", A".1" is A & op=0x71 ; op=159 {
			
	local tmp:1 = A;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", A".2" is A & op=0x71 ; op=175 {
			
	local tmp:1 = A;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", A".3" is A & op=0x71 ; op=191 {
			
	local tmp:1 = A;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", A".4" is A & op=0x71 ; op=207 {
			
	local tmp:1 = A;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", A".5" is A & op=0x71 ; op=223 {
			
	local tmp:1 = A;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", A".6" is A & op=0x71 ; op=239 {
			
	local tmp:1 = A;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", A".7" is A & op=0x71 ; op=255 {
			
	local tmp:1 = A;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	

	
		:XOR1 "CY", PSW".0" is PSW & op=0x71 ; op=15 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", PSW".1" is PSW & op=0x71 ; op=31 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", PSW".2" is PSW & op=0x71 ; op=47 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", PSW".3" is PSW & op=0x71 ; op=63 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", PSW".4" is PSW & op=0x71 ; op=79 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", PSW".5" is PSW & op=0x71 ; op=95 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", PSW".6" is PSW & op=0x71 ; op=111 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", PSW".7" is PSW & op=0x71 ; op=127 ; op=0xFA {
			
	local tmp:1 = PSW;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	

	
		:XOR1 "CY", [HL]".0" is HL & op=0x71 ; op=135 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", [HL]".1" is HL & op=0x71 ; op=151 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", [HL]".2" is HL & op=0x71 ; op=167 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", [HL]".3" is HL & op=0x71 ; op=183 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", [HL]".4" is HL & op=0x71 ; op=199 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", [HL]".5" is HL & op=0x71 ; op=215 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", [HL]".6" is HL & op=0x71 ; op=231 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", [HL]".7" is HL & op=0x71 ; op=247 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	

	
		:XOR1 "CY", ES:[HL]".0" is ES & HL & op=0x11 ; op=0x71 ; op=135 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[0,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", ES:[HL]".1" is ES & HL & op=0x11 ; op=0x71 ; op=151 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[1,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", ES:[HL]".2" is ES & HL & op=0x11 ; op=0x71 ; op=167 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[2,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", ES:[HL]".3" is ES & HL & op=0x11 ; op=0x71 ; op=183 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[3,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", ES:[HL]".4" is ES & HL & op=0x11 ; op=0x71 ; op=199 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[4,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", ES:[HL]".5" is ES & HL & op=0x11 ; op=0x71 ; op=215 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[5,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", ES:[HL]".6" is ES & HL & op=0x11 ; op=0x71 ; op=231 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[6,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	
		:XOR1 "CY", ES:[HL]".7" is ES & HL & op=0x11 ; op=0x71 ; op=247 {
			local addr:4 = segment(ES, HL);
			
	local tmp:1 = *:1 addr;
	tmp = tmp[7,1];
	local cy = $(CY);
	cy = cy ^ tmp;
	$(CY) = cy;

		}
	

	
		:SET1  tgt_saddrb".0" is op=0x71 ; op=2 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 0);
	tgt_saddrb = tmp;

		}
	
		:SET1  tgt_saddrb".1" is op=0x71 ; op=18 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 1);
	tgt_saddrb = tmp;

		}
	
		:SET1  tgt_saddrb".2" is op=0x71 ; op=34 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 2);
	tgt_saddrb = tmp;

		}
	
		:SET1  tgt_saddrb".3" is op=0x71 ; op=50 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 3);
	tgt_saddrb = tmp;

		}
	
		:SET1  tgt_saddrb".4" is op=0x71 ; op=66 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 4);
	tgt_saddrb = tmp;

		}
	
		:SET1  tgt_saddrb".5" is op=0x71 ; op=82 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 5);
	tgt_saddrb = tmp;

		}
	
		:SET1  tgt_saddrb".6" is op=0x71 ; op=98 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 6);
	tgt_saddrb = tmp;

		}
	
		:SET1  tgt_saddrb".7" is op=0x71 ; op=114 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp | (1 << 7);
	tgt_saddrb = tmp;

		}
	

	
		:SET1  tgt_sfrb".0" is op=0x71 ; op=10 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 0);
	tgt_sfrb = tmp;

		}
	
		:SET1  tgt_sfrb".1" is op=0x71 ; op=26 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 1);
	tgt_sfrb = tmp;

		}
	
		:SET1  tgt_sfrb".2" is op=0x71 ; op=42 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 2);
	tgt_sfrb = tmp;

		}
	
		:SET1  tgt_sfrb".3" is op=0x71 ; op=58 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 3);
	tgt_sfrb = tmp;

		}
	
		:SET1  tgt_sfrb".4" is op=0x71 ; op=74 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 4);
	tgt_sfrb = tmp;

		}
	
		:SET1  tgt_sfrb".5" is op=0x71 ; op=90 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 5);
	tgt_sfrb = tmp;

		}
	
		:SET1  tgt_sfrb".6" is op=0x71 ; op=106 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 6);
	tgt_sfrb = tmp;

		}
	
		:SET1  tgt_sfrb".7" is op=0x71 ; op=122 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp | (1 << 7);
	tgt_sfrb = tmp;

		}
	

	
		:SET1  A".0" is A & op=0x71 ; op=138 {
			
	local tmp = A;
	tmp = tmp | (1 << 0);
	A = tmp;

		}
	
		:SET1  A".1" is A & op=0x71 ; op=154 {
			
	local tmp = A;
	tmp = tmp | (1 << 1);
	A = tmp;

		}
	
		:SET1  A".2" is A & op=0x71 ; op=170 {
			
	local tmp = A;
	tmp = tmp | (1 << 2);
	A = tmp;

		}
	
		:SET1  A".3" is A & op=0x71 ; op=186 {
			
	local tmp = A;
	tmp = tmp | (1 << 3);
	A = tmp;

		}
	
		:SET1  A".4" is A & op=0x71 ; op=202 {
			
	local tmp = A;
	tmp = tmp | (1 << 4);
	A = tmp;

		}
	
		:SET1  A".5" is A & op=0x71 ; op=218 {
			
	local tmp = A;
	tmp = tmp | (1 << 5);
	A = tmp;

		}
	
		:SET1  A".6" is A & op=0x71 ; op=234 {
			
	local tmp = A;
	tmp = tmp | (1 << 6);
	A = tmp;

		}
	
		:SET1  A".7" is A & op=0x71 ; op=250 {
			
	local tmp = A;
	tmp = tmp | (1 << 7);
	A = tmp;

		}
	

	
		:SET1  PSW".0" is PSW & op=0x71 ; op=10 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 0);
	PSW = tmp;

		}
	
		:SET1  PSW".1" is PSW & op=0x71 ; op=26 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 1);
	PSW = tmp;

		}
	
		:SET1  PSW".2" is PSW & op=0x71 ; op=42 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 2);
	PSW = tmp;

		}
	
		:SET1  PSW".3" is PSW & op=0x71 ; op=58 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 3);
	PSW = tmp;

		}
	
		:SET1  PSW".4" is PSW & op=0x71 ; op=74 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 4);
	PSW = tmp;

		}
	
		:SET1  PSW".5" is PSW & op=0x71 ; op=90 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 5);
	PSW = tmp;

		}
	
		:SET1  PSW".6" is PSW & op=0x71 ; op=106 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 6);
	PSW = tmp;

		}
	
		:SET1  PSW".7" is PSW & op=0x71 ; op=122 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp | (1 << 7);
	PSW = tmp;

		}
	

	
		:SET1  [HL]".0" is HL & op=0x71 ; op=130 {
			local addr:4 = segment(0xF:2, HL);
			#local addr:4 = segment(0xF0000:4, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 0);
	*:1 addr = tmp;

		}
	
		:SET1  [HL]".1" is HL & op=0x71 ; op=146 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 1);
	*:1 addr = tmp;

		}
	
		:SET1  [HL]".2" is HL & op=0x71 ; op=162 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 2);
	*:1 addr = tmp;

		}
	
		:SET1  [HL]".3" is HL & op=0x71 ; op=178 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 3);
	*:1 addr = tmp;

		}
	
		:SET1  [HL]".4" is HL & op=0x71 ; op=194 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 4);
	*:1 addr = tmp;

		}
	
		:SET1  [HL]".5" is HL & op=0x71 ; op=210 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 5);
	*:1 addr = tmp;

		}
	
		:SET1  [HL]".6" is HL & op=0x71 ; op=226 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 6);
	*:1 addr = tmp;

		}
	
		:SET1  [HL]".7" is HL & op=0x71 ; op=242 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 7);
	*:1 addr = tmp;

		}
	

	
		:SET1  ES:[HL]".0" is ES & HL & op=0x11 ; op=0x71 ; op=130 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 0);
	*:1 addr = tmp;

		}
	
		:SET1  ES:[HL]".1" is ES & HL & op=0x11 ; op=0x71 ; op=146 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 1);
	*:1 addr = tmp;

		}
	
		:SET1  ES:[HL]".2" is ES & HL & op=0x11 ; op=0x71 ; op=162 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 2);
	*:1 addr = tmp;

		}
	
		:SET1  ES:[HL]".3" is ES & HL & op=0x11 ; op=0x71 ; op=178 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 3);
	*:1 addr = tmp;

		}
	
		:SET1  ES:[HL]".4" is ES & HL & op=0x11 ; op=0x71 ; op=194 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 4);
	*:1 addr = tmp;

		}
	
		:SET1  ES:[HL]".5" is ES & HL & op=0x11 ; op=0x71 ; op=210 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 5);
	*:1 addr = tmp;

		}
	
		:SET1  ES:[HL]".6" is ES & HL & op=0x11 ; op=0x71 ; op=226 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 6);
	*:1 addr = tmp;

		}
	
		:SET1  ES:[HL]".7" is ES & HL & op=0x11 ; op=0x71 ; op=242 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp | (1 << 7);
	*:1 addr = tmp;

		}
	

	
		:CLR1  tgt_saddrb".0" is op=0x71 ; op=3 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 0);
	tgt_saddrb = tmp;

		}
	
		:CLR1  tgt_saddrb".1" is op=0x71 ; op=19 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 1);
	tgt_saddrb = tmp;

		}
	
		:CLR1  tgt_saddrb".2" is op=0x71 ; op=35 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 2);
	tgt_saddrb = tmp;

		}
	
		:CLR1  tgt_saddrb".3" is op=0x71 ; op=51 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 3);
	tgt_saddrb = tmp;

		}
	
		:CLR1  tgt_saddrb".4" is op=0x71 ; op=67 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 4);
	tgt_saddrb = tmp;

		}
	
		:CLR1  tgt_saddrb".5" is op=0x71 ; op=83 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 5);
	tgt_saddrb = tmp;

		}
	
		:CLR1  tgt_saddrb".6" is op=0x71 ; op=99 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 6);
	tgt_saddrb = tmp;

		}
	
		:CLR1  tgt_saddrb".7" is op=0x71 ; op=115 ; tgt_saddrb {
			
	local tmp = tgt_saddrb;
	tmp = tmp & ~(1 << 7);
	tgt_saddrb = tmp;

		}
	

	
		:CLR1  tgt_sfrb".0" is op=0x71 ; op=11 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 0);
	tgt_sfrb = tmp;

		}
	
		:CLR1  tgt_sfrb".1" is op=0x71 ; op=27 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 1);
	tgt_sfrb = tmp;

		}
	
		:CLR1  tgt_sfrb".2" is op=0x71 ; op=43 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 2);
	tgt_sfrb = tmp;

		}
	
		:CLR1  tgt_sfrb".3" is op=0x71 ; op=59 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 3);
	tgt_sfrb = tmp;

		}
	
		:CLR1  tgt_sfrb".4" is op=0x71 ; op=75 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 4);
	tgt_sfrb = tmp;

		}
	
		:CLR1  tgt_sfrb".5" is op=0x71 ; op=91 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 5);
	tgt_sfrb = tmp;

		}
	
		:CLR1  tgt_sfrb".6" is op=0x71 ; op=107 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 6);
	tgt_sfrb = tmp;

		}
	
		:CLR1  tgt_sfrb".7" is op=0x71 ; op=123 ; tgt_sfrb {
			
	local tmp = tgt_sfrb;
	tmp = tmp & ~(1 << 7);
	tgt_sfrb = tmp;

		}
	

	
		:CLR1  A".0" is A & op=0x71 ; op=139 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 0);
	A = tmp;

		}
	
		:CLR1  A".1" is A & op=0x71 ; op=155 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 1);
	A = tmp;

		}
	
		:CLR1  A".2" is A & op=0x71 ; op=171 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 2);
	A = tmp;

		}
	
		:CLR1  A".3" is A & op=0x71 ; op=187 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 3);
	A = tmp;

		}
	
		:CLR1  A".4" is A & op=0x71 ; op=203 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 4);
	A = tmp;

		}
	
		:CLR1  A".5" is A & op=0x71 ; op=219 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 5);
	A = tmp;

		}
	
		:CLR1  A".6" is A & op=0x71 ; op=235 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 6);
	A = tmp;

		}
	
		:CLR1  A".7" is A & op=0x71 ; op=251 {
			
	local tmp = A;
	tmp = tmp & ~(1 << 7);
	A = tmp;

		}
	

	
		:CLR1  PSW".0" is PSW & op=0x71 ; op=11 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 0);
	PSW = tmp;

		}
	
		:CLR1  PSW".1" is PSW & op=0x71 ; op=27 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 1);
	PSW = tmp;

		}
	
		:CLR1  PSW".2" is PSW & op=0x71 ; op=43 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 2);
	PSW = tmp;

		}
	
		:CLR1  PSW".3" is PSW & op=0x71 ; op=59 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 3);
	PSW = tmp;

		}
	
		:CLR1  PSW".4" is PSW & op=0x71 ; op=75 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 4);
	PSW = tmp;

		}
	
		:CLR1  PSW".5" is PSW & op=0x71 ; op=91 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 5);
	PSW = tmp;

		}
	
		:CLR1  PSW".6" is PSW & op=0x71 ; op=107 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 6);
	PSW = tmp;

		}
	
		:CLR1  PSW".7" is PSW & op=0x71 ; op=123 ; op=0xFA {
			
	local tmp = PSW;
	tmp = tmp & ~(1 << 7);
	PSW = tmp;

		}
	

	
		:CLR1  [HL]".0" is HL & op=0x71 ; op=131 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 0);
	*:1 addr = tmp;

		}
	
		:CLR1  [HL]".1" is HL & op=0x71 ; op=147 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 1);
	*:1 addr = tmp;

		}
	
		:CLR1  [HL]".2" is HL & op=0x71 ; op=163 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 2);
	*:1 addr = tmp;

		}
	
		:CLR1  [HL]".3" is HL & op=0x71 ; op=179 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 3);
	*:1 addr = tmp;

		}
	
		:CLR1  [HL]".4" is HL & op=0x71 ; op=195 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 4);
	*:1 addr = tmp;

		}
	
		:CLR1  [HL]".5" is HL & op=0x71 ; op=211 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 5);
	*:1 addr = tmp;

		}
	
		:CLR1  [HL]".6" is HL & op=0x71 ; op=227 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 6);
	*:1 addr = tmp;

		}
	
		:CLR1  [HL]".7" is HL & op=0x71 ; op=243 {
			local addr:4 = segment(0xF:2, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 7);
	*:1 addr = tmp;

		}
	

	
		:CLR1  ES:[HL]".0" is ES & HL & op=0x11 ; op=0x71 ; op=131 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 0);
	*:1 addr = tmp;

		}
	
		:CLR1  ES:[HL]".1" is ES & HL & op=0x11 ; op=0x71 ; op=147 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 1);
	*:1 addr = tmp;

		}
	
		:CLR1  ES:[HL]".2" is ES & HL & op=0x11 ; op=0x71 ; op=163 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 2);
	*:1 addr = tmp;

		}
	
		:CLR1  ES:[HL]".3" is ES & HL & op=0x11 ; op=0x71 ; op=179 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 3);
	*:1 addr = tmp;

		}
	
		:CLR1  ES:[HL]".4" is ES & HL & op=0x11 ; op=0x71 ; op=195 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 4);
	*:1 addr = tmp;

		}
	
		:CLR1  ES:[HL]".5" is ES & HL & op=0x11 ; op=0x71 ; op=211 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 5);
	*:1 addr = tmp;

		}
	
		:CLR1  ES:[HL]".6" is ES & HL & op=0x11 ; op=0x71 ; op=227 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 6);
	*:1 addr = tmp;

		}
	
		:CLR1  ES:[HL]".7" is ES & HL & op=0x11 ; op=0x71 ; op=243 {
			local addr:4 = segment(ES, HL);
			
	local tmp = *:1 addr;
	tmp = tmp & ~(1 << 7);
	*:1 addr = tmp;

		}
	



	
		:SET1 !tgt_addr16b".0" is op=0x71 ; op=0 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 0);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".0" is op=0x11 ; op=0x71 ; op=0 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 0);
	tgt_esaddr16b = tmp;

		}
	
		:SET1 !tgt_addr16b".1" is op=0x71 ; op=16 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 1);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".1" is op=0x11 ; op=0x71 ; op=16 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 1);
	tgt_esaddr16b = tmp;

		}
	
		:SET1 !tgt_addr16b".2" is op=0x71 ; op=32 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 2);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".2" is op=0x11 ; op=0x71 ; op=32 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 2);
	tgt_esaddr16b = tmp;

		}
	
		:SET1 !tgt_addr16b".3" is op=0x71 ; op=48 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 3);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".3" is op=0x11 ; op=0x71 ; op=48 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 3);
	tgt_esaddr16b = tmp;

		}
	
		:SET1 !tgt_addr16b".4" is op=0x71 ; op=64 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 4);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".4" is op=0x11 ; op=0x71 ; op=64 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 4);
	tgt_esaddr16b = tmp;

		}
	
		:SET1 !tgt_addr16b".5" is op=0x71 ; op=80 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 5);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".5" is op=0x11 ; op=0x71 ; op=80 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 5);
	tgt_esaddr16b = tmp;

		}
	
		:SET1 !tgt_addr16b".6" is op=0x71 ; op=96 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 6);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".6" is op=0x11 ; op=0x71 ; op=96 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 6);
	tgt_esaddr16b = tmp;

		}
	
		:SET1 !tgt_addr16b".7" is op=0x71 ; op=112 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp | (1 << 7);
	tgt_addr16b = tmp;

		}

		:SET1 tgt_esaddr16b".7" is op=0x11 ; op=0x71 ; op=112 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp | (1 << 7);
	tgt_esaddr16b = tmp;

		}
	

	
		:CLR1 !tgt_addr16b".0" is op=0x71 ; op=8 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 0);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".0" is op=0x11 ; op=0x71 ; op=8 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 0);
	tgt_esaddr16b = tmp;

		}
	
		:CLR1 !tgt_addr16b".1" is op=0x71 ; op=24 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 1);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".1" is op=0x11 ; op=0x71 ; op=24 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 1);
	tgt_esaddr16b = tmp;

		}
	
		:CLR1 !tgt_addr16b".2" is op=0x71 ; op=40 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 2);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".2" is op=0x11 ; op=0x71 ; op=40 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 2);
	tgt_esaddr16b = tmp;

		}
	
		:CLR1 !tgt_addr16b".3" is op=0x71 ; op=56 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 3);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".3" is op=0x11 ; op=0x71 ; op=56 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 3);
	tgt_esaddr16b = tmp;

		}
	
		:CLR1 !tgt_addr16b".4" is op=0x71 ; op=72 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 4);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".4" is op=0x11 ; op=0x71 ; op=72 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 4);
	tgt_esaddr16b = tmp;

		}
	
		:CLR1 !tgt_addr16b".5" is op=0x71 ; op=88 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 5);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".5" is op=0x11 ; op=0x71 ; op=88 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 5);
	tgt_esaddr16b = tmp;

		}
	
		:CLR1 !tgt_addr16b".6" is op=0x71 ; op=104 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 6);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".6" is op=0x11 ; op=0x71 ; op=104 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 6);
	tgt_esaddr16b = tmp;

		}
	
		:CLR1 !tgt_addr16b".7" is op=0x71 ; op=120 ; tgt_addr16b {
			
	local tmp = tgt_addr16b;
	tmp = tmp & ~(1 << 7);
	tgt_addr16b = tmp;

		}

		:CLR1 tgt_esaddr16b".7" is op=0x11 ; op=0x71 ; op=120 ; tgt_esaddr16b {
			
	local tmp = tgt_esaddr16b;
	tmp = tmp & ~(1 << 7);
	tgt_esaddr16b = tmp;

		}
	


:SET1 "CY" is op=0x71 ; op=0x80 {
	$(CY) = 1;
}

:CLR1 "CY" is op=0x71 ; op=0x88 {
	$(CY) = 0;
}

:NOT1 "CY" is op=0x71 ; op=0xC0 {
	$(CY) = !$(CY);
}

#
# Call/return
#


:CALL AX is AX & op=0x61 ; op=0xCA {
	SP = SP - 4;
	local addr:4 = segment(0xF:2, SP);
	*:3 addr = inst_next;
	local tgt:4 = segment(CS, AX);
	call [tgt];
}

:CALL BC is BC & op=0x61 ; op=0xDA {
	SP = SP - 4;
	local addr:4 = segment(0xF:2, SP);
	*:3 addr = inst_next;
	local tgt:4 = segment(CS, BC);
	call [tgt];
}

:CALL DE is DE & op=0x61 ; op=0xEA {
	SP = SP - 4;
	local addr:4 = segment(0xF:2, SP);
	*:3 addr = inst_next;
	local tgt:4 = segment(CS, DE);
	call [tgt];
}

:CALL HL is HL & op=0x61 ; op=0xFA {
	SP = SP - 4;
	local addr:4 = segment(0xF:2, SP);
	*:3 addr = inst_next;
	local tgt:4 = segment(CS, HL);
	call [tgt];
}


:CALL $!tgt_rel16 is op=0xFE ; tgt_rel16 {
	SP = SP - 4;
	local addr:4 = segment(0xF:2, SP);
	*:3 addr = inst_next;
	call tgt_rel16;
}

:CALL !tgt_addr16_0 is op=0xFD ; tgt_addr16_0 {
	SP = SP - 4;
	local addr:4 = segment(0xF:2, SP);
	*:3 addr = inst_next;
	call tgt_addr16_0;
}

:CALL !!tgt_addr20 is op=0xFC ; tgt_addr20 {
	SP = SP - 4;
	local addr:4 = segment(0xF:2, SP);
	*:3 addr = inst_next;
	call tgt_addr20;
}

# TODO: CALLT

:BRK is op=0x61 ; op=0xCC {
	local addr:4 = segment(0xF:2, SP);
	*:1 (addr - 1) = PSW;
	*:3 (addr - 4) = inst_next;
	SP = SP - 4;
	$(IE) = 0;
	local tmp = *:2 0x7e:4;
	call [tmp];
}

:RET is op=0xD7 {
	local addr:4 = segment(0xF:2, SP);
	PC = *:3 addr;
	SP = SP + 4;
	return [PC];
}

:RETI is op=0x61 ; op=0xFC {
	local addr:4 = segment(0xF:2, SP);
	PC = *:3 addr;
	PSW = *:1 (addr + 3);
	SP = SP + 4;
	return [PC];
}

:RETB is op=0x61 ; op=0xEC {
	local addr:4 = segment(0xF:2, SP);
	PC = *:3 addr;
	PSW = *:1 (addr + 3);
	SP = SP + 4;
	return [PC];
}

#
# Stack manipulate
#

:PUSH PSW is PSW & op=0x61 ; op=0xDD {
	local addr:4 = segment(0xF:2, SP);
	*:1 (addr - 1) = PSW;
	*:1 (addr - 2) = 0;
	SP = SP - 2;
}


:PUSH AX is op=0xC1 & AX {
	SP = SP - 2;
	local addr:4 = segment(0xF:2, SP);
	*:2 addr = AX;
}

:PUSH BC is op=0xC3 & BC {
	SP = SP - 2;
	local addr:4 = segment(0xF:2, SP);
	*:2 addr = BC;
}

:PUSH DE is op=0xC5 & DE {
	SP = SP - 2;
	local addr:4 = segment(0xF:2, SP);
	*:2 addr = DE;
}

:PUSH HL is op=0xC7 & HL {
	SP = SP - 2;
	local addr:4 = segment(0xF:2, SP);
	*:2 addr = HL;
}


:POP PSW is PSW & op=0x61 ; op=0xCD {
	local addr:4 = segment(0xF:2, SP) + 1;
	PSW = *:1 addr;
	SP = SP + 2;
}


:POP AX is op=0xC0 & AX {
	local addr:4 = segment(0xF:2, SP);
	AX = *:2 addr;
	SP = SP + 2;
}

:POP BC is op=0xC2 & BC {
	local addr:4 = segment(0xF:2, SP);
	BC = *:2 addr;
	SP = SP + 2;
}

:POP DE is op=0xC4 & DE {
	local addr:4 = segment(0xF:2, SP);
	DE = *:2 addr;
	SP = SP + 2;
}

:POP HL is op=0xC6 & HL {
	local addr:4 = segment(0xF:2, SP);
	HL = *:2 addr;
	SP = SP + 2;
}


:MOVW SP, #word is SP & op=0xCB ; op=0xF8 ; word {
	SP = word;
}

:MOVW SP, AX is SP & AX & op=0xBE ; op=0xF8 {
	SP = AX;
}

:MOVW AX, SP is AX & SP & op=0xAE ; op=0xF8 {
	AX = SP;
}

:MOVW BC, SP is BC & SP & op=0xDB ; op=0xF8 ; op=0xFF {
	BC = SP;
}

:MOVW DE, SP is DE & SP & op=0xEB ; op=0xF8 ; op=0xFF {
	DE = SP;
}

:MOVW HL, SP is HL & SP & op=0xFB ; op=0xF8 ; op=0xFF {
	HL = SP;
}

:ADDW SP, #byte is SP & op=0x10 ; byte {
	SP = SP + byte;
}

:SUBW SP, #byte is SP & op=0x20 ; byte {
	SP = SP - byte;
}


#
# Unconditional branch
#

:BR AX is AX & op=0x61 ; op=0xCB {
	local tgt:4 = segment(CS, AX);
	goto [tgt];
}

:BR $tgt_rel8 is op=0xEF ; tgt_rel8 {
	goto tgt_rel8;
}

:BR $!tgt_rel16 is op=0xEE ; tgt_rel16 {
	goto tgt_rel16;
}

:BR !tgt_addr16_0 is op=0xED ; tgt_addr16_0 {
	goto tgt_addr16_0;
}

:BR !!tgt_addr20 is op=0xEC ; tgt_addr20 {
	goto tgt_addr20;
}

#
# Conditional branch
#

:BC tgt_rel8 is op=0xDC ; tgt_rel8 { if ($(CY) == 1) goto tgt_rel8; }
:BNC tgt_rel8 is op=0xDE ; tgt_rel8 { if ($(CY) == 0) goto tgt_rel8; }
:BZ tgt_rel8 is op=0xDD ; tgt_rel8 { if ($(Z) == 1) goto tgt_rel8; }
:BNZ tgt_rel8 is op=0xDF ; tgt_rel8 { if ($(Z) == 0) goto tgt_rel8; }
:BH tgt_rel8 is op=0x61 ; op=0xC3 ; tgt_rel8 { if (($(Z) || $(CY)) == 0) goto tgt_rel8; }
:BNH tgt_rel8 is op=0x61 ; op=0xD3 ; tgt_rel8 { if (($(Z) || $(CY)) == 1) goto tgt_rel8; }








	
		:BT tgt_saddrb".0", $tgt_rel8 is op=0x31 ; op=2 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".0", $tgt_rel8 is op=0x31 ; op=130 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BT A".0", $tgt_rel8 is A & op=0x31 ; op=3 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BT PSW".0", $tgt_rel8 is PSW & op=0x31 ; op=130 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".0", $tgt_rel8 is HL & op=0x31 ; op=131 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".0", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=131 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[0,1] == 1) goto tgt_rel8;

		}
	
		:BT tgt_saddrb".1", $tgt_rel8 is op=0x31 ; op=18 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".1", $tgt_rel8 is op=0x31 ; op=146 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BT A".1", $tgt_rel8 is A & op=0x31 ; op=19 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BT PSW".1", $tgt_rel8 is PSW & op=0x31 ; op=146 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".1", $tgt_rel8 is HL & op=0x31 ; op=147 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".1", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=147 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[1,1] == 1) goto tgt_rel8;

		}
	
		:BT tgt_saddrb".2", $tgt_rel8 is op=0x31 ; op=34 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".2", $tgt_rel8 is op=0x31 ; op=162 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BT A".2", $tgt_rel8 is A & op=0x31 ; op=35 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BT PSW".2", $tgt_rel8 is PSW & op=0x31 ; op=162 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".2", $tgt_rel8 is HL & op=0x31 ; op=163 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".2", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=163 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[2,1] == 1) goto tgt_rel8;

		}
	
		:BT tgt_saddrb".3", $tgt_rel8 is op=0x31 ; op=50 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".3", $tgt_rel8 is op=0x31 ; op=178 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BT A".3", $tgt_rel8 is A & op=0x31 ; op=51 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BT PSW".3", $tgt_rel8 is PSW & op=0x31 ; op=178 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".3", $tgt_rel8 is HL & op=0x31 ; op=179 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".3", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=179 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[3,1] == 1) goto tgt_rel8;

		}
	
		:BT tgt_saddrb".4", $tgt_rel8 is op=0x31 ; op=66 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".4", $tgt_rel8 is op=0x31 ; op=194 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BT A".4", $tgt_rel8 is A & op=0x31 ; op=67 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BT PSW".4", $tgt_rel8 is PSW & op=0x31 ; op=194 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".4", $tgt_rel8 is HL & op=0x31 ; op=195 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".4", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=195 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[4,1] == 1) goto tgt_rel8;

		}
	
		:BT tgt_saddrb".5", $tgt_rel8 is op=0x31 ; op=82 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".5", $tgt_rel8 is op=0x31 ; op=210 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BT A".5", $tgt_rel8 is A & op=0x31 ; op=83 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BT PSW".5", $tgt_rel8 is PSW & op=0x31 ; op=210 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".5", $tgt_rel8 is HL & op=0x31 ; op=211 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".5", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=211 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[5,1] == 1) goto tgt_rel8;

		}
	
		:BT tgt_saddrb".6", $tgt_rel8 is op=0x31 ; op=98 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".6", $tgt_rel8 is op=0x31 ; op=226 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BT A".6", $tgt_rel8 is A & op=0x31 ; op=99 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BT PSW".6", $tgt_rel8 is PSW & op=0x31 ; op=226 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".6", $tgt_rel8 is HL & op=0x31 ; op=227 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".6", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=227 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[6,1] == 1) goto tgt_rel8;

		}
	
		:BT tgt_saddrb".7", $tgt_rel8 is op=0x31 ; op=114 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BT tgt_sfrb".7", $tgt_rel8 is op=0x31 ; op=242 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BT A".7", $tgt_rel8 is A & op=0x31 ; op=115 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BT PSW".7", $tgt_rel8 is PSW & op=0x31 ; op=242 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BT [HL]".7", $tgt_rel8 is HL & op=0x31 ; op=243 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BT ES:[HL]".7", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=243 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[7,1] == 1) goto tgt_rel8;

		}
	

	
		:BF tgt_saddrb".0", $tgt_rel8 is op=0x31 ; op=4 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[0,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".0", $tgt_rel8 is op=0x31 ; op=132 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[0,1] == 0) goto tgt_rel8;

		}

		:BF A".0", $tgt_rel8 is A & op=0x31 ; op=5 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[0,1] == 0) goto tgt_rel8;

		}

		:BF PSW".0", $tgt_rel8 is PSW & op=0x31 ; op=132 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[0,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".0", $tgt_rel8 is HL & op=0x31 ; op=133 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[0,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".0", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=133 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[0,1] == 0) goto tgt_rel8;

		}
	
		:BF tgt_saddrb".1", $tgt_rel8 is op=0x31 ; op=20 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[1,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".1", $tgt_rel8 is op=0x31 ; op=148 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[1,1] == 0) goto tgt_rel8;

		}

		:BF A".1", $tgt_rel8 is A & op=0x31 ; op=21 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[1,1] == 0) goto tgt_rel8;

		}

		:BF PSW".1", $tgt_rel8 is PSW & op=0x31 ; op=148 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[1,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".1", $tgt_rel8 is HL & op=0x31 ; op=149 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[1,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".1", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=149 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[1,1] == 0) goto tgt_rel8;

		}
	
		:BF tgt_saddrb".2", $tgt_rel8 is op=0x31 ; op=36 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[2,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".2", $tgt_rel8 is op=0x31 ; op=164 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[2,1] == 0) goto tgt_rel8;

		}

		:BF A".2", $tgt_rel8 is A & op=0x31 ; op=37 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[2,1] == 0) goto tgt_rel8;

		}

		:BF PSW".2", $tgt_rel8 is PSW & op=0x31 ; op=164 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[2,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".2", $tgt_rel8 is HL & op=0x31 ; op=165 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[2,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".2", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=165 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[2,1] == 0) goto tgt_rel8;

		}
	
		:BF tgt_saddrb".3", $tgt_rel8 is op=0x31 ; op=52 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[3,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".3", $tgt_rel8 is op=0x31 ; op=180 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[3,1] == 0) goto tgt_rel8;

		}

		:BF A".3", $tgt_rel8 is A & op=0x31 ; op=53 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[3,1] == 0) goto tgt_rel8;

		}

		:BF PSW".3", $tgt_rel8 is PSW & op=0x31 ; op=180 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[3,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".3", $tgt_rel8 is HL & op=0x31 ; op=181 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[3,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".3", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=181 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[3,1] == 0) goto tgt_rel8;

		}
	
		:BF tgt_saddrb".4", $tgt_rel8 is op=0x31 ; op=68 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[4,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".4", $tgt_rel8 is op=0x31 ; op=196 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[4,1] == 0) goto tgt_rel8;

		}

		:BF A".4", $tgt_rel8 is A & op=0x31 ; op=69 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[4,1] == 0) goto tgt_rel8;

		}

		:BF PSW".4", $tgt_rel8 is PSW & op=0x31 ; op=196 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[4,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".4", $tgt_rel8 is HL & op=0x31 ; op=197 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[4,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".4", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=197 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[4,1] == 0) goto tgt_rel8;

		}
	
		:BF tgt_saddrb".5", $tgt_rel8 is op=0x31 ; op=84 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[5,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".5", $tgt_rel8 is op=0x31 ; op=212 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[5,1] == 0) goto tgt_rel8;

		}

		:BF A".5", $tgt_rel8 is A & op=0x31 ; op=85 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[5,1] == 0) goto tgt_rel8;

		}

		:BF PSW".5", $tgt_rel8 is PSW & op=0x31 ; op=212 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[5,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".5", $tgt_rel8 is HL & op=0x31 ; op=213 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[5,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".5", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=213 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[5,1] == 0) goto tgt_rel8;

		}
	
		:BF tgt_saddrb".6", $tgt_rel8 is op=0x31 ; op=100 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[6,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".6", $tgt_rel8 is op=0x31 ; op=228 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[6,1] == 0) goto tgt_rel8;

		}

		:BF A".6", $tgt_rel8 is A & op=0x31 ; op=101 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[6,1] == 0) goto tgt_rel8;

		}

		:BF PSW".6", $tgt_rel8 is PSW & op=0x31 ; op=228 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[6,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".6", $tgt_rel8 is HL & op=0x31 ; op=229 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[6,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".6", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=229 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[6,1] == 0) goto tgt_rel8;

		}
	
		:BF tgt_saddrb".7", $tgt_rel8 is op=0x31 ; op=116 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	if (data[7,1] == 0) goto tgt_rel8;

		}

		:BF tgt_sfrb".7", $tgt_rel8 is op=0x31 ; op=244 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	if (data[7,1] == 0) goto tgt_rel8;

		}

		:BF A".7", $tgt_rel8 is A & op=0x31 ; op=117 ; tgt_rel8 {
			
	local data:1 = A;
	if (data[7,1] == 0) goto tgt_rel8;

		}

		:BF PSW".7", $tgt_rel8 is PSW & op=0x31 ; op=244 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	if (data[7,1] == 0) goto tgt_rel8;

		}

		:BF [HL]".7", $tgt_rel8 is HL & op=0x31 ; op=245 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	if (data[7,1] == 0) goto tgt_rel8;

		}

		:BF ES:[HL]".7", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=245 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	if (data[7,1] == 0) goto tgt_rel8;

		}
	

	
		:BTCLR tgt_saddrb".0", $tgt_rel8 is op=0x31 ; op=0 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[0,1] = 0;
	tgt_saddrb = new;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".0", $tgt_rel8 is op=0x31 ; op=128 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[0,1] = 0;
	tgt_sfrb = new;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".0", $tgt_rel8 is A & op=0x31 ; op=1 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[0,1] = 0;
	A = new;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".0", $tgt_rel8 is PSW & op=0x31 ; op=128 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[0,1] = 0;
	PSW = new;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".0", $tgt_rel8 is HL & op=0x31 ; op=129 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[0,1] = 0;
	*:1 addr = new;
	if (data[0,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".0", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=129 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[0,1] = 0;
	*:1 addr = new;
	if (data[0,1] == 1) goto tgt_rel8;

		}
	
		:BTCLR tgt_saddrb".1", $tgt_rel8 is op=0x31 ; op=16 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[1,1] = 0;
	tgt_saddrb = new;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".1", $tgt_rel8 is op=0x31 ; op=144 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[1,1] = 0;
	tgt_sfrb = new;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".1", $tgt_rel8 is A & op=0x31 ; op=17 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[1,1] = 0;
	A = new;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".1", $tgt_rel8 is PSW & op=0x31 ; op=144 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[1,1] = 0;
	PSW = new;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".1", $tgt_rel8 is HL & op=0x31 ; op=145 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[1,1] = 0;
	*:1 addr = new;
	if (data[1,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".1", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=145 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[1,1] = 0;
	*:1 addr = new;
	if (data[1,1] == 1) goto tgt_rel8;

		}
	
		:BTCLR tgt_saddrb".2", $tgt_rel8 is op=0x31 ; op=32 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[2,1] = 0;
	tgt_saddrb = new;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".2", $tgt_rel8 is op=0x31 ; op=160 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[2,1] = 0;
	tgt_sfrb = new;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".2", $tgt_rel8 is A & op=0x31 ; op=33 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[2,1] = 0;
	A = new;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".2", $tgt_rel8 is PSW & op=0x31 ; op=160 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[2,1] = 0;
	PSW = new;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".2", $tgt_rel8 is HL & op=0x31 ; op=161 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[2,1] = 0;
	*:1 addr = new;
	if (data[2,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".2", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=161 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[2,1] = 0;
	*:1 addr = new;
	if (data[2,1] == 1) goto tgt_rel8;

		}
	
		:BTCLR tgt_saddrb".3", $tgt_rel8 is op=0x31 ; op=48 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[3,1] = 0;
	tgt_saddrb = new;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".3", $tgt_rel8 is op=0x31 ; op=176 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[3,1] = 0;
	tgt_sfrb = new;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".3", $tgt_rel8 is A & op=0x31 ; op=49 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[3,1] = 0;
	A = new;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".3", $tgt_rel8 is PSW & op=0x31 ; op=176 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[3,1] = 0;
	PSW = new;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".3", $tgt_rel8 is HL & op=0x31 ; op=177 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[3,1] = 0;
	*:1 addr = new;
	if (data[3,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".3", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=177 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[3,1] = 0;
	*:1 addr = new;
	if (data[3,1] == 1) goto tgt_rel8;

		}
	
		:BTCLR tgt_saddrb".4", $tgt_rel8 is op=0x31 ; op=64 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[4,1] = 0;
	tgt_saddrb = new;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".4", $tgt_rel8 is op=0x31 ; op=192 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[4,1] = 0;
	tgt_sfrb = new;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".4", $tgt_rel8 is A & op=0x31 ; op=65 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[4,1] = 0;
	A = new;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".4", $tgt_rel8 is PSW & op=0x31 ; op=192 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[4,1] = 0;
	PSW = new;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".4", $tgt_rel8 is HL & op=0x31 ; op=193 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[4,1] = 0;
	*:1 addr = new;
	if (data[4,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".4", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=193 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[4,1] = 0;
	*:1 addr = new;
	if (data[4,1] == 1) goto tgt_rel8;

		}
	
		:BTCLR tgt_saddrb".5", $tgt_rel8 is op=0x31 ; op=80 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[5,1] = 0;
	tgt_saddrb = new;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".5", $tgt_rel8 is op=0x31 ; op=208 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[5,1] = 0;
	tgt_sfrb = new;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".5", $tgt_rel8 is A & op=0x31 ; op=81 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[5,1] = 0;
	A = new;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".5", $tgt_rel8 is PSW & op=0x31 ; op=208 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[5,1] = 0;
	PSW = new;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".5", $tgt_rel8 is HL & op=0x31 ; op=209 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[5,1] = 0;
	*:1 addr = new;
	if (data[5,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".5", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=209 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[5,1] = 0;
	*:1 addr = new;
	if (data[5,1] == 1) goto tgt_rel8;

		}
	
		:BTCLR tgt_saddrb".6", $tgt_rel8 is op=0x31 ; op=96 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[6,1] = 0;
	tgt_saddrb = new;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".6", $tgt_rel8 is op=0x31 ; op=224 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[6,1] = 0;
	tgt_sfrb = new;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".6", $tgt_rel8 is A & op=0x31 ; op=97 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[6,1] = 0;
	A = new;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".6", $tgt_rel8 is PSW & op=0x31 ; op=224 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[6,1] = 0;
	PSW = new;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".6", $tgt_rel8 is HL & op=0x31 ; op=225 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[6,1] = 0;
	*:1 addr = new;
	if (data[6,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".6", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=225 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[6,1] = 0;
	*:1 addr = new;
	if (data[6,1] == 1) goto tgt_rel8;

		}
	
		:BTCLR tgt_saddrb".7", $tgt_rel8 is op=0x31 ; op=112 ; tgt_saddrb ; tgt_rel8 {
			
	local data:1 = tgt_saddrb;
	local new = data;
	new[7,1] = 0;
	tgt_saddrb = new;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BTCLR tgt_sfrb".7", $tgt_rel8 is op=0x31 ; op=240 ; tgt_sfrb ; tgt_rel8 {
			
	local data:1 = tgt_sfrb;
	local new = data;
	new[7,1] = 0;
	tgt_sfrb = new;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BTCLR A".7", $tgt_rel8 is A & op=0x31 ; op=113 ; tgt_rel8 {
			
	local data:1 = A;
	local new = data;
	new[7,1] = 0;
	A = new;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BTCLR PSW".7", $tgt_rel8 is PSW & op=0x31 ; op=240 ; op=0xFA ; tgt_rel8 {
			
	local data:1 = PSW;
	local new = data;
	new[7,1] = 0;
	PSW = new;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BTCLR [HL]".7", $tgt_rel8 is HL & op=0x31 ; op=241 ; tgt_rel8 {
			local addr:4 = segment(0xF:2, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[7,1] = 0;
	*:1 addr = new;
	if (data[7,1] == 1) goto tgt_rel8;

		}

		:BTCLR ES:[HL]".7", $tgt_rel8 is ES & HL & op=0x11 ; op=0x31 ; op=241 ; tgt_rel8 {
			local addr:4 = segment(ES, HL);
			
	local data:1 = *:1 addr;
	local new = data;
	new[7,1] = 0;
	*:1 addr = new;
	if (data[7,1] == 1) goto tgt_rel8;

		}
	


#
# Conditional skip
#

:SKC is op=0x61 ; op=0xC8 [ cond_skc = 1; globalset(inst_next, cond_skc); ] {}
:SKNC is op=0x61 ; op=0xD8 [ cond_sknc = 1; globalset(inst_next, cond_sknc); ] {}
:SKZ is op=0x61 ; op=0xE8 [ cond_skz = 1; globalset(inst_next, cond_skz); ] {}
:SKNZ is op=0x61 ; op=0xF8 [ cond_sknz = 1; globalset(inst_next, cond_sknz); ] {}
:SKH is op=0x61 ; op=0xE3 [ cond_skh = 1; globalset(inst_next, cond_skh); ] {}
:SKNH is op=0x61 ; op=0xF3 [ cond_sknh = 1; globalset(inst_next, cond_sknh); ] {}

#
# CPU control
#

:"SEL RB0" is op=0x61 ; op=0xCF {
	sel(0:1);
}
:"SEL RB1" is op=0x61 ; op=0xDF {
	sel(1:1);
}
:"SEL RB2" is op=0x61 ; op=0xEF {
	sel(2:1);
}
:"SEL RB3" is op=0x61 ; op=0xFF {
	sel(3:1);
}

:NOP is op=0x00 {
}

# EI, DI covered by SET1 PSW.7, CLR1 PSW.7

:HALT is op=0x61 ; op=0xED {
	halt();
}

:STOP is op=0x61 ; op=0xFD {
	stop();
}
